{
  "arxiv_id": "1706.03762v7",
  "document_info": {
    "total_sections": 16,
    "total_paragraphs": 58,
    "total_word_count": 4288,
    "unique_citations": 39,
    "total_citation_instances": 44
  },
  "sections": [
    {
      "section_info": {
        "section_number": "1",
        "section_title": "Introduction",
        "full_title": "1Introduction",
        "section_type": "section",
        "parent_section": null
      },
      "content": {
        "paragraphs": [
          "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15].",
          "Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden stateshtsubscript‚Ñéùë°h_{t}italic_h start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT, as a function of the previous hidden stateht‚àí1subscript‚Ñéùë°1h_{t-1}italic_h start_POSTSUBSCRIPT italic_t - 1 end_POSTSUBSCRIPTand the input for positiontùë°titalic_t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples.\nRecent work has achieved significant improvements in computational efficiency through factorization tricks[21]and conditional computation[32], while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.",
          "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]. In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network.",
          "In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs."
        ],
        "full_text": "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15]. Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden stateshtsubscript‚Ñéùë°h_{t}italic_h start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT, as a function of the previous hidden stateht‚àí1subscript‚Ñéùë°1h_{t-1}italic_h start_POSTSUBSCRIPT italic_t - 1 end_POSTSUBSCRIPTand the input for positiontùë°titalic_t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples.\nRecent work has achieved significant improvements in computational efficiency through factorization tricks[21]and conditional computation[32], while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains. Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]. In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network. In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.",
        "citations": [
          "2",
          "5",
          "7",
          "13",
          "15",
          "19",
          "21",
          "24",
          "27",
          "32",
          "35",
          "38"
        ],
        "citation_sentences": [
          {
            "sentence": "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]",
            "citation_numbers": [
              "13",
              "7",
              "35",
              "2",
              "5"
            ],
            "full_paragraph": "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15].",
            "context_type": "table",
            "context_info": {}
          },
          {
            "sentence": "Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15].",
            "citation_numbers": [
              "38",
              "24",
              "15"
            ],
            "full_paragraph": "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15].",
            "context_type": "table",
            "context_info": {}
          },
          {
            "sentence": "Recent work has achieved significant improvements in computational efficiency through factorization tricks[21]and conditional computation[32], while also improving model performance in case of the latter",
            "citation_numbers": [
              "21",
              "32"
            ],
            "full_paragraph": "Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden stateshtsubscript‚Ñéùë°h_{t}italic_h start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT, as a function of the previous hidden stateht‚àí1subscript‚Ñéùë°1h_{t-1}italic_h start_POSTSUBSCRIPT italic_t - 1 end_POSTSUBSCRIPTand the input for positiontùë°titalic_t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples.\nRecent work has achieved significant improvements in computational efficiency through factorization tricks[21]and conditional computation[32], while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.",
            "context_type": "table",
            "context_info": {}
          },
          {
            "sentence": "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]",
            "citation_numbers": [
              "2",
              "19"
            ],
            "full_paragraph": "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]. In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network.",
            "context_type": "table",
            "context_info": {}
          },
          {
            "sentence": "In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network.",
            "citation_numbers": [
              "27"
            ],
            "full_paragraph": "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]. In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network.",
            "context_type": "text",
            "context_info": {}
          }
        ],
        "total_citations": 12,
        "total_citation_instances": 5,
        "table_contexts": []
      }
    },
    {
      "section_info": {
        "section_number": "2",
        "section_title": "Background",
        "full_title": "2Background",
        "section_type": "section",
        "parent_section": null
      },
      "content": {
        "paragraphs": [
          "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions[12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section3.2.",
          "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations[4,27,28,22].",
          "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks[34].",
          "To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution.\nIn the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as[17,18]and[9]."
        ],
        "full_text": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions[12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section3.2. Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations[4,27,28,22]. End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks[34]. To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution.\nIn the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as[17,18]and[9].",
        "citations": [
          "4",
          "9",
          "12",
          "16",
          "17",
          "18",
          "22",
          "27",
          "28",
          "34"
        ],
        "citation_sentences": [
          {
            "sentence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions",
            "citation_numbers": [
              "16",
              "18",
              "9"
            ],
            "full_paragraph": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions[12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section3.2.",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "This makes it more difficult to learn dependencies between distant positions[12]",
            "citation_numbers": [
              "12"
            ],
            "full_paragraph": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions[12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section3.2.",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations[4,27,28,22].",
            "citation_numbers": [
              "4",
              "27",
              "28",
              "22"
            ],
            "full_paragraph": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations[4,27,28,22].",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks[34].",
            "citation_numbers": [
              "34"
            ],
            "full_paragraph": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks[34].",
            "context_type": "table",
            "context_info": {}
          },
          {
            "sentence": "In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as[17,18]and[9].",
            "citation_numbers": [
              "17",
              "18",
              "9"
            ],
            "full_paragraph": "To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution.\nIn the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as[17,18]and[9].",
            "context_type": "table",
            "context_info": {}
          }
        ],
        "total_citations": 10,
        "total_citation_instances": 5,
        "table_contexts": []
      }
    },
    {
      "section_info": {
        "section_number": "3.1",
        "section_title": "Encoder and Decoder Stacks",
        "full_title": "3.1Encoder and Decoder Stacks",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "3",
          "parent_section_title": "Model Architecture",
          "parent_full_title": "3Model Architecture"
        }
      },
      "content": {
        "paragraphs": [
          "Encoder:The encoder is composed of a stack ofN=6ùëÅ6N=6italic_N = 6identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection[11]around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer isLayerNorm‚Å¢(x+Sublayer‚Å¢(x))LayerNormùë•Sublayerùë•\\mathrm{LayerNorm}(x+\\mathrm{Sublayer}(x))roman_LayerNorm ( italic_x + roman_Sublayer ( italic_x ) ), whereSublayer‚Å¢(x)Sublayerùë•\\mathrm{Sublayer}(x)roman_Sublayer ( italic_x )is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimensiondmodel=512subscriptùëëmodel512d_{\\text{model}}=512italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT = 512.",
          "Decoder:The decoder is also composed of a stack ofN=6ùëÅ6N=6italic_N = 6identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for positioniùëñiitalic_ican depend only on the known outputs at positions less thaniùëñiitalic_i."
        ],
        "full_text": "Encoder:The encoder is composed of a stack ofN=6ùëÅ6N=6italic_N = 6identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection[11]around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer isLayerNorm‚Å¢(x+Sublayer‚Å¢(x))LayerNormùë•Sublayerùë•\\mathrm{LayerNorm}(x+\\mathrm{Sublayer}(x))roman_LayerNorm ( italic_x + roman_Sublayer ( italic_x ) ), whereSublayer‚Å¢(x)Sublayerùë•\\mathrm{Sublayer}(x)roman_Sublayer ( italic_x )is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimensiondmodel=512subscriptùëëmodel512d_{\\text{model}}=512italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT = 512. Decoder:The decoder is also composed of a stack ofN=6ùëÅ6N=6italic_N = 6identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for positioniùëñiitalic_ican depend only on the known outputs at positions less thaniùëñiitalic_i.",
        "citations": [
          "1",
          "11"
        ],
        "citation_sentences": [
          {
            "sentence": "We employ a residual connection[11]around each of the two sub-layers, followed by layer normalization[1]",
            "citation_numbers": [
              "11",
              "1"
            ],
            "full_paragraph": "Encoder:The encoder is composed of a stack ofN=6ùëÅ6N=6italic_N = 6identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection[11]around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer isLayerNorm‚Å¢(x+Sublayer‚Å¢(x))LayerNormùë•Sublayerùë•\\mathrm{LayerNorm}(x+\\mathrm{Sublayer}(x))roman_LayerNorm ( italic_x + roman_Sublayer ( italic_x ) ), whereSublayer‚Å¢(x)Sublayerùë•\\mathrm{Sublayer}(x)roman_Sublayer ( italic_x )is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimensiondmodel=512subscriptùëëmodel512d_{\\text{model}}=512italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT = 512.",
            "context_type": "text",
            "context_info": {}
          }
        ],
        "total_citations": 2,
        "total_citation_instances": 1,
        "table_contexts": []
      }
    },
    {
      "section_info": {
        "section_number": "3.2",
        "section_title": "Attention",
        "full_title": "3.2Attention",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "3",
          "parent_section_title": "Model Architecture",
          "parent_full_title": "3Model Architecture"
        }
      },
      "content": {
        "paragraphs": [
          "An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.",
          "[TABLE] : 3.2.1Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimensiondksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, and values of dimensiondvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT. We compute the dot products of the query with all keys, divide each bydksubscriptùëëùëò\\sqrt{d_{k}}square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG, and apply a softmax function to obtain the weights on the values.In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrixQùëÑQitalic_Q. The keys and values are also packed together into matricesKùêæKitalic_KandVùëâVitalic_V. We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]. We suspect that for large values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients111To illustrate why the dot products get large, assume that the components ofqùëûqitalic_qandkùëòkitalic_kare independent random variables with mean00and variance1111. Then their dot product,q‚ãÖk=‚àëi=1dkqi‚Å¢ki‚ãÖùëûùëòsuperscriptsubscriptùëñ1subscriptùëëùëòsubscriptùëûùëñsubscriptùëòùëñq\\cdot k=\\sum_{i=1}^{d_{k}}q_{i}k_{i}italic_q ‚ãÖ italic_k = ‚àë start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, has mean00and variancedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT.. To counteract this effect, we scale the dot products by1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG.",
          "[TABLE] : 3.2.2Multi-Head AttentionScaled Dot-Product AttentionMulti-Head AttentionFigure 2:(left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.Instead of performing a single attention function withdmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and valuesh‚Ñéhitalic_htimes with different, learned linear projections todksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT,dksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTanddvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPTdimensions, respectively.\nOn each of these projected versions of queries, keys and values we then perform the attention function in parallel, yieldingdvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT-dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure2.Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.MultiHead‚Å¢(Q,K,V)MultiHeadùëÑùêæùëâ\\displaystyle\\mathrm{MultiHead}(Q,K,V)roman_MultiHead ( italic_Q , italic_K , italic_V )=Concat‚Å¢(head1,‚Ä¶,headh)‚Å¢WOabsentConcatsubscripthead1‚Ä¶subscriptheadhsuperscriptùëäùëÇ\\displaystyle=\\mathrm{Concat}(\\mathrm{head_{1}},...,\\mathrm{head_{h}})W^{O}= roman_Concat ( roman_head start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , roman_head start_POSTSUBSCRIPT roman_h end_POSTSUBSCRIPT ) italic_W start_POSTSUPERSCRIPT italic_O end_POSTSUPERSCRIPTwhere‚Å¢headiwheresubscriptheadi\\displaystyle\\text{where}~{}\\mathrm{head_{i}}where roman_head start_POSTSUBSCRIPT roman_i end_POSTSUBSCRIPT=Attention‚Å¢(Q‚Å¢WiQ,K‚Å¢WiK,V‚Å¢WiV)absentAttentionùëÑsubscriptsuperscriptùëäùëÑùëñùêæsubscriptsuperscriptùëäùêæùëñùëâsubscriptsuperscriptùëäùëâùëñ\\displaystyle=\\mathrm{Attention}(QW^{Q}_{i},KW^{K}_{i},VW^{V}_{i})= roman_Attention ( italic_Q italic_W start_POSTSUPERSCRIPT italic_Q end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_K italic_W start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_V italic_W start_POSTSUPERSCRIPT italic_V end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT )Where the projections are parameter matricesWiQ‚àà‚Ñùdmodel√ódksubscriptsuperscriptùëäùëÑùëñsuperscript‚ÑùsubscriptùëëmodelsubscriptùëëùëòW^{Q}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{k}}italic_W start_POSTSUPERSCRIPT italic_Q end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT,WiK‚àà‚Ñùdmodel√ódksubscriptsuperscriptùëäùêæùëñsuperscript‚ÑùsubscriptùëëmodelsubscriptùëëùëòW^{K}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{k}}italic_W start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT,WiV‚àà‚Ñùdmodel√ódvsubscriptsuperscriptùëäùëâùëñsuperscript‚Ñùsubscriptùëëmodelsubscriptùëëùë£W^{V}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{v}}italic_W start_POSTSUPERSCRIPT italic_V end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT end_POSTSUPERSCRIPTandWO‚àà‚Ñùh‚Å¢dv√ódmodelsuperscriptùëäùëÇsuperscript‚Ñù‚Ñésubscriptùëëùë£subscriptùëëmodelW^{O}\\in\\mathbb{R}^{hd_{v}\\times d_{\\text{model}}}italic_W start_POSTSUPERSCRIPT italic_O end_POSTSUPERSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_h italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT.In this work we employh=8‚Ñé8h=8italic_h = 8parallel attention layers, or heads. For each of these we usedk=dv=dmodel/h=64subscriptùëëùëòsubscriptùëëùë£subscriptùëëmodel‚Ñé64d_{k}=d_{v}=d_{\\text{model}}/h=64italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT = italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT / italic_h = 64.\nDue to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.",
          "3.2.3Applications of Attention in our ModelThe Transformer uses multi-head attention in three different ways:‚Ä¢In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9].‚Ä¢The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.‚Ä¢Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to‚àí‚àû-\\infty- ‚àû) all values in the input of the softmax which correspond to illegal connections. See Figure2."
        ],
        "full_text": "An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key. [TABLE] : 3.2.1Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimensiondksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, and values of dimensiondvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT. We compute the dot products of the query with all keys, divide each bydksubscriptùëëùëò\\sqrt{d_{k}}square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG, and apply a softmax function to obtain the weights on the values.In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrixQùëÑQitalic_Q. The keys and values are also packed together into matricesKùêæKitalic_KandVùëâVitalic_V. We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]. We suspect that for large values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients111To illustrate why the dot products get large, assume that the components ofqùëûqitalic_qandkùëòkitalic_kare independent random variables with mean00and variance1111. Then their dot product,q‚ãÖk=‚àëi=1dkqi‚Å¢ki‚ãÖùëûùëòsuperscriptsubscriptùëñ1subscriptùëëùëòsubscriptùëûùëñsubscriptùëòùëñq\\cdot k=\\sum_{i=1}^{d_{k}}q_{i}k_{i}italic_q ‚ãÖ italic_k = ‚àë start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, has mean00and variancedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT.. To counteract this effect, we scale the dot products by1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. [TABLE] : 3.2.2Multi-Head AttentionScaled Dot-Product AttentionMulti-Head AttentionFigure 2:(left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.Instead of performing a single attention function withdmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and valuesh‚Ñéhitalic_htimes with different, learned linear projections todksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT,dksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTanddvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPTdimensions, respectively.\nOn each of these projected versions of queries, keys and values we then perform the attention function in parallel, yieldingdvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT-dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure2.Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.MultiHead‚Å¢(Q,K,V)MultiHeadùëÑùêæùëâ\\displaystyle\\mathrm{MultiHead}(Q,K,V)roman_MultiHead ( italic_Q , italic_K , italic_V )=Concat‚Å¢(head1,‚Ä¶,headh)‚Å¢WOabsentConcatsubscripthead1‚Ä¶subscriptheadhsuperscriptùëäùëÇ\\displaystyle=\\mathrm{Concat}(\\mathrm{head_{1}},...,\\mathrm{head_{h}})W^{O}= roman_Concat ( roman_head start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , roman_head start_POSTSUBSCRIPT roman_h end_POSTSUBSCRIPT ) italic_W start_POSTSUPERSCRIPT italic_O end_POSTSUPERSCRIPTwhere‚Å¢headiwheresubscriptheadi\\displaystyle\\text{where}~{}\\mathrm{head_{i}}where roman_head start_POSTSUBSCRIPT roman_i end_POSTSUBSCRIPT=Attention‚Å¢(Q‚Å¢WiQ,K‚Å¢WiK,V‚Å¢WiV)absentAttentionùëÑsubscriptsuperscriptùëäùëÑùëñùêæsubscriptsuperscriptùëäùêæùëñùëâsubscriptsuperscriptùëäùëâùëñ\\displaystyle=\\mathrm{Attention}(QW^{Q}_{i},KW^{K}_{i},VW^{V}_{i})= roman_Attention ( italic_Q italic_W start_POSTSUPERSCRIPT italic_Q end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_K italic_W start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_V italic_W start_POSTSUPERSCRIPT italic_V end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT )Where the projections are parameter matricesWiQ‚àà‚Ñùdmodel√ódksubscriptsuperscriptùëäùëÑùëñsuperscript‚ÑùsubscriptùëëmodelsubscriptùëëùëòW^{Q}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{k}}italic_W start_POSTSUPERSCRIPT italic_Q end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT,WiK‚àà‚Ñùdmodel√ódksubscriptsuperscriptùëäùêæùëñsuperscript‚ÑùsubscriptùëëmodelsubscriptùëëùëòW^{K}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{k}}italic_W start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT,WiV‚àà‚Ñùdmodel√ódvsubscriptsuperscriptùëäùëâùëñsuperscript‚Ñùsubscriptùëëmodelsubscriptùëëùë£W^{V}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{v}}italic_W start_POSTSUPERSCRIPT italic_V end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT end_POSTSUPERSCRIPTandWO‚àà‚Ñùh‚Å¢dv√ódmodelsuperscriptùëäùëÇsuperscript‚Ñù‚Ñésubscriptùëëùë£subscriptùëëmodelW^{O}\\in\\mathbb{R}^{hd_{v}\\times d_{\\text{model}}}italic_W start_POSTSUPERSCRIPT italic_O end_POSTSUPERSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_h italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT.In this work we employh=8‚Ñé8h=8italic_h = 8parallel attention layers, or heads. For each of these we usedk=dv=dmodel/h=64subscriptùëëùëòsubscriptùëëùë£subscriptùëëmodel‚Ñé64d_{k}=d_{v}=d_{\\text{model}}/h=64italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT = italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT / italic_h = 64.\nDue to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality. 3.2.3Applications of Attention in our ModelThe Transformer uses multi-head attention in three different ways:‚Ä¢In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9].‚Ä¢The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.‚Ä¢Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to‚àí‚àû-\\infty- ‚àû) all values in the input of the softmax which correspond to illegal connections. See Figure2.",
        "citations": [
          "2",
          "3",
          "9",
          "38"
        ],
        "citation_sentences": [
          {
            "sentence": "We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention",
            "citation_numbers": [
              "2"
            ],
            "full_paragraph": "[TABLE] : 3.2.1Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimensiondksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, and values of dimensiondvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT. We compute the dot products of the query with all keys, divide each bydksubscriptùëëùëò\\sqrt{d_{k}}square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG, and apply a softmax function to obtain the weights on the values.In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrixQùëÑQitalic_Q. The keys and values are also packed together into matricesKùêæKitalic_KandVùëâVitalic_V. We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]. We suspect that for large values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients111To illustrate why the dot products get large, assume that the components ofqùëûqitalic_qandkùëòkitalic_kare independent random variables with mean00and variance1111. Then their dot product,q‚ãÖk=‚àëi=1dkqi‚Å¢ki‚ãÖùëûùëòsuperscriptsubscriptùëñ1subscriptùëëùëòsubscriptùëûùëñsubscriptùëòùëñq\\cdot k=\\sum_{i=1}^{d_{k}}q_{i}k_{i}italic_q ‚ãÖ italic_k = ‚àë start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, has mean00and variancedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT.. To counteract this effect, we scale the dot products by1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG.",
            "context_type": "equation",
            "context_info": {}
          },
          {
            "sentence": "While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]",
            "citation_numbers": [
              "3"
            ],
            "full_paragraph": "[TABLE] : 3.2.1Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimensiondksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, and values of dimensiondvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT. We compute the dot products of the query with all keys, divide each bydksubscriptùëëùëò\\sqrt{d_{k}}square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG, and apply a softmax function to obtain the weights on the values.In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrixQùëÑQitalic_Q. The keys and values are also packed together into matricesKùêæKitalic_KandVùëâVitalic_V. We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]. We suspect that for large values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients111To illustrate why the dot products get large, assume that the components ofqùëûqitalic_qandkùëòkitalic_kare independent random variables with mean00and variance1111. Then their dot product,q‚ãÖk=‚àëi=1dkqi‚Å¢ki‚ãÖùëûùëòsuperscriptsubscriptùëñ1subscriptùëëùëòsubscriptùëûùëñsubscriptùëòùëñq\\cdot k=\\sum_{i=1}^{d_{k}}q_{i}k_{i}italic_q ‚ãÖ italic_k = ‚àë start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, has mean00and variancedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT.. To counteract this effect, we scale the dot products by1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG.",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9].‚Ä¢The encoder contains self-attention layers",
            "citation_numbers": [
              "38",
              "2",
              "9"
            ],
            "full_paragraph": "3.2.3Applications of Attention in our ModelThe Transformer uses multi-head attention in three different ways:‚Ä¢In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9].‚Ä¢The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.‚Ä¢Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to‚àí‚àû-\\infty- ‚àû) all values in the input of the softmax which correspond to illegal connections. See Figure2.",
            "context_type": "table",
            "context_info": {}
          }
        ],
        "total_citations": 4,
        "total_citation_instances": 3,
        "table_contexts": [
          {
            "table_text": "3.2.1Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimensiondksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, and values of dimensiondvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT. We compute the dot products of the query with all keys, divide each bydksubscriptùëëùëò\\sqrt{d_{k}}square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG, and apply a softmax function to obtain the weights on the values.In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrixQùëÑQitalic_Q. The keys and values are also packed together into matricesKùêæKitalic_KandVùëâVitalic_V. We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]. We suspect that for large values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients111To illustrate why the dot products get large, assume that the components ofqùëûqitalic_qandkùëòkitalic_kare independent random variables with mean00and variance1111. Then their dot product,q‚ãÖk=‚àëi=1dkqi‚Å¢ki‚ãÖùëûùëòsuperscriptsubscriptùëñ1subscriptùëëùëòsubscriptùëûùëñsubscriptùëòùëñq\\cdot k=\\sum_{i=1}^{d_{k}}q_{i}k_{i}italic_q ‚ãÖ italic_k = ‚àë start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, has mean00and variancedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT.. To counteract this effect, we scale the dot products by1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG.",
            "caption": "",
            "citations": [
              "2",
              "3"
            ]
          },
          {
            "table_text": "3.2.2Multi-Head AttentionScaled Dot-Product AttentionMulti-Head AttentionFigure 2:(left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.Instead of performing a single attention function withdmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and valuesh‚Ñéhitalic_htimes with different, learned linear projections todksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT,dksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTanddvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPTdimensions, respectively.\nOn each of these projected versions of queries, keys and values we then perform the attention function in parallel, yieldingdvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT-dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure2.Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.MultiHead‚Å¢(Q,K,V)MultiHeadùëÑùêæùëâ\\displaystyle\\mathrm{MultiHead}(Q,K,V)roman_MultiHead ( italic_Q , italic_K , italic_V )=Concat‚Å¢(head1,‚Ä¶,headh)‚Å¢WOabsentConcatsubscripthead1‚Ä¶subscriptheadhsuperscriptùëäùëÇ\\displaystyle=\\mathrm{Concat}(\\mathrm{head_{1}},...,\\mathrm{head_{h}})W^{O}= roman_Concat ( roman_head start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , roman_head start_POSTSUBSCRIPT roman_h end_POSTSUBSCRIPT ) italic_W start_POSTSUPERSCRIPT italic_O end_POSTSUPERSCRIPTwhere‚Å¢headiwheresubscriptheadi\\displaystyle\\text{where}~{}\\mathrm{head_{i}}where roman_head start_POSTSUBSCRIPT roman_i end_POSTSUBSCRIPT=Attention‚Å¢(Q‚Å¢WiQ,K‚Å¢WiK,V‚Å¢WiV)absentAttentionùëÑsubscriptsuperscriptùëäùëÑùëñùêæsubscriptsuperscriptùëäùêæùëñùëâsubscriptsuperscriptùëäùëâùëñ\\displaystyle=\\mathrm{Attention}(QW^{Q}_{i},KW^{K}_{i},VW^{V}_{i})= roman_Attention ( italic_Q italic_W start_POSTSUPERSCRIPT italic_Q end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_K italic_W start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_V italic_W start_POSTSUPERSCRIPT italic_V end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT )Where the projections are parameter matricesWiQ‚àà‚Ñùdmodel√ódksubscriptsuperscriptùëäùëÑùëñsuperscript‚ÑùsubscriptùëëmodelsubscriptùëëùëòW^{Q}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{k}}italic_W start_POSTSUPERSCRIPT italic_Q end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT,WiK‚àà‚Ñùdmodel√ódksubscriptsuperscriptùëäùêæùëñsuperscript‚ÑùsubscriptùëëmodelsubscriptùëëùëòW^{K}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{k}}italic_W start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT,WiV‚àà‚Ñùdmodel√ódvsubscriptsuperscriptùëäùëâùëñsuperscript‚Ñùsubscriptùëëmodelsubscriptùëëùë£W^{V}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{v}}italic_W start_POSTSUPERSCRIPT italic_V end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT end_POSTSUPERSCRIPTandWO‚àà‚Ñùh‚Å¢dv√ódmodelsuperscriptùëäùëÇsuperscript‚Ñù‚Ñésubscriptùëëùë£subscriptùëëmodelW^{O}\\in\\mathbb{R}^{hd_{v}\\times d_{\\text{model}}}italic_W start_POSTSUPERSCRIPT italic_O end_POSTSUPERSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_h italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT.In this work we employh=8‚Ñé8h=8italic_h = 8parallel attention layers, or heads. For each of these we usedk=dv=dmodel/h=64subscriptùëëùëòsubscriptùëëùë£subscriptùëëmodel‚Ñé64d_{k}=d_{v}=d_{\\text{model}}/h=64italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT = italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT / italic_h = 64.\nDue to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.",
            "caption": "",
            "citations": []
          }
        ]
      }
    },
    {
      "section_info": {
        "section_number": "3.3",
        "section_title": "Position-wise Feed-Forward Networks",
        "full_title": "3.3Position-wise Feed-Forward Networks",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "3",
          "parent_section_title": "Model Architecture",
          "parent_full_title": "3Model Architecture"
        }
      },
      "content": {
        "paragraphs": [
          "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between.",
          "[TABLE] : FFN‚Å¢(x)=max‚Å°(0,x‚Å¢W1+b1)‚Å¢W2+b2FFNùë•0ùë•subscriptùëä1subscriptùëè1subscriptùëä2subscriptùëè2\\mathrm{FFN}(x)=\\max(0,xW_{1}+b_{1})W_{2}+b_{2}roman_FFN ( italic_x ) = roman_max ( 0 , italic_x italic_W start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + italic_b start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) italic_W start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + italic_b start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT(2)",
          "While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1. The dimensionality of input and output isdmodel=512subscriptùëëmodel512d_{\\text{model}}=512italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT = 512, and the inner-layer has dimensionalitydf‚Å¢f=2048subscriptùëëùëìùëì2048d_{ff}=2048italic_d start_POSTSUBSCRIPT italic_f italic_f end_POSTSUBSCRIPT = 2048."
        ],
        "full_text": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between. [TABLE] : FFN‚Å¢(x)=max‚Å°(0,x‚Å¢W1+b1)‚Å¢W2+b2FFNùë•0ùë•subscriptùëä1subscriptùëè1subscriptùëä2subscriptùëè2\\mathrm{FFN}(x)=\\max(0,xW_{1}+b_{1})W_{2}+b_{2}roman_FFN ( italic_x ) = roman_max ( 0 , italic_x italic_W start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + italic_b start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) italic_W start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + italic_b start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT(2) While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1. The dimensionality of input and output isdmodel=512subscriptùëëmodel512d_{\\text{model}}=512italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT = 512, and the inner-layer has dimensionalitydf‚Å¢f=2048subscriptùëëùëìùëì2048d_{ff}=2048italic_d start_POSTSUBSCRIPT italic_f italic_f end_POSTSUBSCRIPT = 2048.",
        "citations": [],
        "citation_sentences": [],
        "total_citations": 0,
        "total_citation_instances": 0,
        "table_contexts": [
          {
            "table_text": "FFN‚Å¢(x)=max‚Å°(0,x‚Å¢W1+b1)‚Å¢W2+b2FFNùë•0ùë•subscriptùëä1subscriptùëè1subscriptùëä2subscriptùëè2\\mathrm{FFN}(x)=\\max(0,xW_{1}+b_{1})W_{2}+b_{2}roman_FFN ( italic_x ) = roman_max ( 0 , italic_x italic_W start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + italic_b start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) italic_W start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + italic_b start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT(2)",
            "caption": "",
            "citations": []
          }
        ]
      }
    },
    {
      "section_info": {
        "section_number": "3.4",
        "section_title": "Embeddings and Softmax",
        "full_title": "3.4Embeddings and Softmax",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "3",
          "parent_section_title": "Model Architecture",
          "parent_full_title": "3Model Architecture"
        }
      },
      "content": {
        "paragraphs": [
          "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to[30]. In the embedding layers, we multiply those weights bydmodelsubscriptùëëmodel\\sqrt{d_{\\text{model}}}square-root start_ARG italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_ARG."
        ],
        "full_text": "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to[30]. In the embedding layers, we multiply those weights bydmodelsubscriptùëëmodel\\sqrt{d_{\\text{model}}}square-root start_ARG italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_ARG.",
        "citations": [
          "30"
        ],
        "citation_sentences": [
          {
            "sentence": "In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to[30]",
            "citation_numbers": [
              "30"
            ],
            "full_paragraph": "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to[30]. In the embedding layers, we multiply those weights bydmodelsubscriptùëëmodel\\sqrt{d_{\\text{model}}}square-root start_ARG italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_ARG.",
            "context_type": "table",
            "context_info": {}
          }
        ],
        "total_citations": 1,
        "total_citation_instances": 1,
        "table_contexts": []
      }
    },
    {
      "section_info": {
        "section_number": "3.5",
        "section_title": "Positional Encoding",
        "full_title": "3.5Positional Encoding",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "3",
          "parent_section_title": "Model Architecture",
          "parent_full_title": "3Model Architecture"
        }
      },
      "content": {
        "paragraphs": [
          "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTas the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed[9].",
          "In this work, we use sine and cosine functions of different frequencies:",
          "[TABLE] : P‚Å¢E(p‚Å¢o‚Å¢s,2‚Å¢i)=s‚Å¢i‚Å¢n‚Å¢(p‚Å¢o‚Å¢s/100002‚Å¢i/dmodel)ùëÉsubscriptùê∏ùëùùëúùë†2ùëñùë†ùëñùëõùëùùëúùë†superscript100002ùëñsubscriptùëëmodel\\displaystyle PE_{(pos,2i)}=sin(pos/10000^{2i/d_{\\text{model}}})italic_P italic_E start_POSTSUBSCRIPT ( italic_p italic_o italic_s , 2 italic_i ) end_POSTSUBSCRIPT = italic_s italic_i italic_n ( italic_p italic_o italic_s / 10000 start_POSTSUPERSCRIPT 2 italic_i / italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT )P‚Å¢E(p‚Å¢o‚Å¢s,2‚Å¢i+1)=c‚Å¢o‚Å¢s‚Å¢(p‚Å¢o‚Å¢s/100002‚Å¢i/dmodel)ùëÉsubscriptùê∏ùëùùëúùë†2ùëñ1ùëêùëúùë†ùëùùëúùë†superscript100002ùëñsubscriptùëëmodel\\displaystyle PE_{(pos,2i+1)}=cos(pos/10000^{2i/d_{\\text{model}}})italic_P italic_E start_POSTSUBSCRIPT ( italic_p italic_o italic_s , 2 italic_i + 1 ) end_POSTSUBSCRIPT = italic_c italic_o italic_s ( italic_p italic_o italic_s / 10000 start_POSTSUPERSCRIPT 2 italic_i / italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT )",
          "wherep‚Å¢o‚Å¢sùëùùëúùë†positalic_p italic_o italic_sis the position andiùëñiitalic_iis the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from2‚Å¢œÄ2ùúã2\\pi2 italic_œÄto10000‚ãÖ2‚Å¢œÄ‚ãÖ100002ùúã10000\\cdot 2\\pi10000 ‚ãÖ 2 italic_œÄ. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offsetkùëòkitalic_k,P‚Å¢Ep‚Å¢o‚Å¢s+kùëÉsubscriptùê∏ùëùùëúùë†ùëòPE_{pos+k}italic_P italic_E start_POSTSUBSCRIPT italic_p italic_o italic_s + italic_k end_POSTSUBSCRIPTcan be represented as a linear function ofP‚Å¢Ep‚Å¢o‚Å¢sùëÉsubscriptùê∏ùëùùëúùë†PE_{pos}italic_P italic_E start_POSTSUBSCRIPT italic_p italic_o italic_s end_POSTSUBSCRIPT.",
          "We also experimented with using learned positional embeddings[9]instead, and found that the two versions produced nearly identical results (see Table3row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training."
        ],
        "full_text": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTas the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed[9]. In this work, we use sine and cosine functions of different frequencies: [TABLE] : P‚Å¢E(p‚Å¢o‚Å¢s,2‚Å¢i)=s‚Å¢i‚Å¢n‚Å¢(p‚Å¢o‚Å¢s/100002‚Å¢i/dmodel)ùëÉsubscriptùê∏ùëùùëúùë†2ùëñùë†ùëñùëõùëùùëúùë†superscript100002ùëñsubscriptùëëmodel\\displaystyle PE_{(pos,2i)}=sin(pos/10000^{2i/d_{\\text{model}}})italic_P italic_E start_POSTSUBSCRIPT ( italic_p italic_o italic_s , 2 italic_i ) end_POSTSUBSCRIPT = italic_s italic_i italic_n ( italic_p italic_o italic_s / 10000 start_POSTSUPERSCRIPT 2 italic_i / italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT )P‚Å¢E(p‚Å¢o‚Å¢s,2‚Å¢i+1)=c‚Å¢o‚Å¢s‚Å¢(p‚Å¢o‚Å¢s/100002‚Å¢i/dmodel)ùëÉsubscriptùê∏ùëùùëúùë†2ùëñ1ùëêùëúùë†ùëùùëúùë†superscript100002ùëñsubscriptùëëmodel\\displaystyle PE_{(pos,2i+1)}=cos(pos/10000^{2i/d_{\\text{model}}})italic_P italic_E start_POSTSUBSCRIPT ( italic_p italic_o italic_s , 2 italic_i + 1 ) end_POSTSUBSCRIPT = italic_c italic_o italic_s ( italic_p italic_o italic_s / 10000 start_POSTSUPERSCRIPT 2 italic_i / italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ) wherep‚Å¢o‚Å¢sùëùùëúùë†positalic_p italic_o italic_sis the position andiùëñiitalic_iis the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from2‚Å¢œÄ2ùúã2\\pi2 italic_œÄto10000‚ãÖ2‚Å¢œÄ‚ãÖ100002ùúã10000\\cdot 2\\pi10000 ‚ãÖ 2 italic_œÄ. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offsetkùëòkitalic_k,P‚Å¢Ep‚Å¢o‚Å¢s+kùëÉsubscriptùê∏ùëùùëúùë†ùëòPE_{pos+k}italic_P italic_E start_POSTSUBSCRIPT italic_p italic_o italic_s + italic_k end_POSTSUBSCRIPTcan be represented as a linear function ofP‚Å¢Ep‚Å¢o‚Å¢sùëÉsubscriptùê∏ùëùùëúùë†PE_{pos}italic_P italic_E start_POSTSUBSCRIPT italic_p italic_o italic_s end_POSTSUBSCRIPT. We also experimented with using learned positional embeddings[9]instead, and found that the two versions produced nearly identical results (see Table3row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.",
        "citations": [
          "9"
        ],
        "citation_sentences": [
          {
            "sentence": "There are many choices of positional encodings, learned and fixed[9].",
            "citation_numbers": [
              "9"
            ],
            "full_paragraph": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTas the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed[9].",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "We also experimented with using learned positional embeddings[9]instead, and found that the two versions produced nearly identical results (see Table3row (E))",
            "citation_numbers": [
              "9"
            ],
            "full_paragraph": "We also experimented with using learned positional embeddings[9]instead, and found that the two versions produced nearly identical results (see Table3row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.",
            "context_type": "table",
            "context_info": {
              "table_caption": "row (e))"
            }
          }
        ],
        "total_citations": 1,
        "total_citation_instances": 2,
        "table_contexts": [
          {
            "table_text": "P‚Å¢E(p‚Å¢o‚Å¢s,2‚Å¢i)=s‚Å¢i‚Å¢n‚Å¢(p‚Å¢o‚Å¢s/100002‚Å¢i/dmodel)ùëÉsubscriptùê∏ùëùùëúùë†2ùëñùë†ùëñùëõùëùùëúùë†superscript100002ùëñsubscriptùëëmodel\\displaystyle PE_{(pos,2i)}=sin(pos/10000^{2i/d_{\\text{model}}})italic_P italic_E start_POSTSUBSCRIPT ( italic_p italic_o italic_s , 2 italic_i ) end_POSTSUBSCRIPT = italic_s italic_i italic_n ( italic_p italic_o italic_s / 10000 start_POSTSUPERSCRIPT 2 italic_i / italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT )P‚Å¢E(p‚Å¢o‚Å¢s,2‚Å¢i+1)=c‚Å¢o‚Å¢s‚Å¢(p‚Å¢o‚Å¢s/100002‚Å¢i/dmodel)ùëÉsubscriptùê∏ùëùùëúùë†2ùëñ1ùëêùëúùë†ùëùùëúùë†superscript100002ùëñsubscriptùëëmodel\\displaystyle PE_{(pos,2i+1)}=cos(pos/10000^{2i/d_{\\text{model}}})italic_P italic_E start_POSTSUBSCRIPT ( italic_p italic_o italic_s , 2 italic_i + 1 ) end_POSTSUBSCRIPT = italic_c italic_o italic_s ( italic_p italic_o italic_s / 10000 start_POSTSUPERSCRIPT 2 italic_i / italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT )",
            "caption": "",
            "citations": []
          }
        ]
      }
    },
    {
      "section_info": {
        "section_number": "4",
        "section_title": "Why Self-Attention",
        "full_title": "4Why Self-Attention",
        "section_type": "section",
        "parent_section": null
      },
      "content": {
        "paragraphs": [
          "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations(x1,‚Ä¶,xn)subscriptùë•1‚Ä¶subscriptùë•ùëõ(x_{1},...,x_{n})( italic_x start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , italic_x start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT )to another sequence of equal length(z1,‚Ä¶,zn)subscriptùëß1‚Ä¶subscriptùëßùëõ(z_{1},...,z_{n})( italic_z start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , italic_z start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ), withxi,zi‚àà‚Ñùdsubscriptùë•ùëñsubscriptùëßùëñsuperscript‚Ñùùëëx_{i},z_{i}\\in\\mathbb{R}^{d}italic_x start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_z start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata.",
          "One is the total computational complexity per layer.\nAnother is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required.",
          "The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies[12]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types.",
          "[TABLE] : Table 1:Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types.nùëõnitalic_nis the sequence length,dùëëditalic_dis the representation dimension,kùëòkitalic_kis the kernel size of convolutions andrùëüritalic_rthe size of the neighborhood in restricted self-attention.Layer TypeComplexity per LayerSequentialMaximum Path LengthOperationsSelf-AttentionO‚Å¢(n2‚ãÖd)ùëÇ‚ãÖsuperscriptùëõ2ùëëO(n^{2}\\cdot d)italic_O ( italic_n start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ‚ãÖ italic_d )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )RecurrentO‚Å¢(n‚ãÖd2)ùëÇ‚ãÖùëõsuperscriptùëë2O(n\\cdot d^{2})italic_O ( italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )O‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )O‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )ConvolutionalO‚Å¢(k‚ãÖn‚ãÖd2)ùëÇ‚ãÖùëòùëõsuperscriptùëë2O(k\\cdot n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )Self-Attention (restricted)O‚Å¢(r‚ãÖn‚ãÖd)ùëÇ‚ãÖùëüùëõùëëO(r\\cdot n\\cdot d)italic_O ( italic_r ‚ãÖ italic_n ‚ãÖ italic_d )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r )",
          "As noted in Table1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requiresO‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )sequential operations.\nIn terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence lengthnùëõnitalic_nis smaller than the representation dimensionalitydùëëditalic_d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece[38]and byte-pair[31]representations.\nTo improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of sizerùëüritalic_rin the input sequence centered around the respective output position. This would increase the maximum path length toO‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r ). We plan to investigate this approach further in future work.",
          "A single convolutional layer with kernel widthk<nùëòùëõk<nitalic_k < italic_ndoes not connect all pairs of input and output positions. Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network.\nConvolutional layers are generally more expensive than recurrent layers, by a factor ofkùëòkitalic_k. Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ). Even withk=nùëòùëõk=nitalic_k = italic_n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.",
          "As side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences."
        ],
        "full_text": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations(x1,‚Ä¶,xn)subscriptùë•1‚Ä¶subscriptùë•ùëõ(x_{1},...,x_{n})( italic_x start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , italic_x start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT )to another sequence of equal length(z1,‚Ä¶,zn)subscriptùëß1‚Ä¶subscriptùëßùëõ(z_{1},...,z_{n})( italic_z start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , italic_z start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ), withxi,zi‚àà‚Ñùdsubscriptùë•ùëñsubscriptùëßùëñsuperscript‚Ñùùëëx_{i},z_{i}\\in\\mathbb{R}^{d}italic_x start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_z start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer.\nAnother is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required. The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies[12]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types. [TABLE] : Table 1:Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types.nùëõnitalic_nis the sequence length,dùëëditalic_dis the representation dimension,kùëòkitalic_kis the kernel size of convolutions andrùëüritalic_rthe size of the neighborhood in restricted self-attention.Layer TypeComplexity per LayerSequentialMaximum Path LengthOperationsSelf-AttentionO‚Å¢(n2‚ãÖd)ùëÇ‚ãÖsuperscriptùëõ2ùëëO(n^{2}\\cdot d)italic_O ( italic_n start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ‚ãÖ italic_d )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )RecurrentO‚Å¢(n‚ãÖd2)ùëÇ‚ãÖùëõsuperscriptùëë2O(n\\cdot d^{2})italic_O ( italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )O‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )O‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )ConvolutionalO‚Å¢(k‚ãÖn‚ãÖd2)ùëÇ‚ãÖùëòùëõsuperscriptùëë2O(k\\cdot n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )Self-Attention (restricted)O‚Å¢(r‚ãÖn‚ãÖd)ùëÇ‚ãÖùëüùëõùëëO(r\\cdot n\\cdot d)italic_O ( italic_r ‚ãÖ italic_n ‚ãÖ italic_d )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r ) As noted in Table1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requiresO‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )sequential operations.\nIn terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence lengthnùëõnitalic_nis smaller than the representation dimensionalitydùëëditalic_d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece[38]and byte-pair[31]representations.\nTo improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of sizerùëüritalic_rin the input sequence centered around the respective output position. This would increase the maximum path length toO‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r ). We plan to investigate this approach further in future work. A single convolutional layer with kernel widthk<nùëòùëõk<nitalic_k < italic_ndoes not connect all pairs of input and output positions. Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network.\nConvolutional layers are generally more expensive than recurrent layers, by a factor ofkùëòkitalic_k. Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ). Even withk=nùëòùëõk=nitalic_k = italic_n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model. As side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences.",
        "citations": [
          "6",
          "12",
          "18",
          "31",
          "38"
        ],
        "citation_sentences": [
          {
            "sentence": "The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies[12]",
            "citation_numbers": [
              "12"
            ],
            "full_paragraph": "The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies[12]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types.",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence lengthnùëõnitalic_nis smaller than the representation dimensionalitydùëëditalic_d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece[38]and byte-pair[31]representations",
            "citation_numbers": [
              "38",
              "31"
            ],
            "full_paragraph": "As noted in Table1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requiresO‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )sequential operations.\nIn terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence lengthnùëõnitalic_nis smaller than the representation dimensionalitydùëëditalic_d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece[38]and byte-pair[31]representations.\nTo improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of sizerùëüritalic_rin the input sequence centered around the respective output position. This would increase the maximum path length toO‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r ). We plan to investigate this approach further in future work.",
            "context_type": "table",
            "context_info": {
              "table_caption": ", a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requireso‚Å¢(n)ùëÇùëõo(n)italic_o ( italic_n )sequential operations"
            }
          },
          {
            "sentence": "Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network",
            "citation_numbers": [
              "18"
            ],
            "full_paragraph": "A single convolutional layer with kernel widthk<nùëòùëõk<nitalic_k < italic_ndoes not connect all pairs of input and output positions. Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network.\nConvolutional layers are generally more expensive than recurrent layers, by a factor ofkùëòkitalic_k. Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ). Even withk=nùëòùëõk=nitalic_k = italic_n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )",
            "citation_numbers": [
              "6"
            ],
            "full_paragraph": "A single convolutional layer with kernel widthk<nùëòùëõk<nitalic_k < italic_ndoes not connect all pairs of input and output positions. Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network.\nConvolutional layers are generally more expensive than recurrent layers, by a factor ofkùëòkitalic_k. Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ). Even withk=nùëòùëõk=nitalic_k = italic_n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.",
            "context_type": "equation",
            "context_info": {}
          }
        ],
        "total_citations": 5,
        "total_citation_instances": 4,
        "table_contexts": [
          {
            "table_text": "Table 1:Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types.nùëõnitalic_nis the sequence length,dùëëditalic_dis the representation dimension,kùëòkitalic_kis the kernel size of convolutions andrùëüritalic_rthe size of the neighborhood in restricted self-attention.Layer TypeComplexity per LayerSequentialMaximum Path LengthOperationsSelf-AttentionO‚Å¢(n2‚ãÖd)ùëÇ‚ãÖsuperscriptùëõ2ùëëO(n^{2}\\cdot d)italic_O ( italic_n start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ‚ãÖ italic_d )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )RecurrentO‚Å¢(n‚ãÖd2)ùëÇ‚ãÖùëõsuperscriptùëë2O(n\\cdot d^{2})italic_O ( italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )O‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )O‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )ConvolutionalO‚Å¢(k‚ãÖn‚ãÖd2)ùëÇ‚ãÖùëòùëõsuperscriptùëë2O(k\\cdot n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )Self-Attention (restricted)O‚Å¢(r‚ãÖn‚ãÖd)ùëÇ‚ãÖùëüùëõùëëO(r\\cdot n\\cdot d)italic_O ( italic_r ‚ãÖ italic_n ‚ãÖ italic_d )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r )",
            "caption": "",
            "citations": []
          }
        ]
      }
    },
    {
      "section_info": {
        "section_number": "5.1",
        "section_title": "Training Data and Batching",
        "full_title": "5.1Training Data and Batching",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "5",
          "parent_section_title": "Training",
          "parent_full_title": "5Training"
        }
      },
      "content": {
        "paragraphs": [
          "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens."
        ],
        "full_text": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.",
        "citations": [
          "3",
          "38"
        ],
        "citation_sentences": [
          {
            "sentence": "Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens",
            "citation_numbers": [
              "3"
            ],
            "full_paragraph": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]",
            "citation_numbers": [
              "38"
            ],
            "full_paragraph": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.",
            "context_type": "text",
            "context_info": {}
          }
        ],
        "total_citations": 2,
        "total_citation_instances": 2,
        "table_contexts": []
      }
    },
    {
      "section_info": {
        "section_number": "5.2",
        "section_title": "Hardware and Schedule",
        "full_title": "5.2Hardware and Schedule",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "5",
          "parent_section_title": "Training",
          "parent_full_title": "5Training"
        }
      },
      "content": {
        "paragraphs": [
          "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table3), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days)."
        ],
        "full_text": "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table3), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days).",
        "citations": [],
        "citation_sentences": [],
        "total_citations": 0,
        "total_citation_instances": 0,
        "table_contexts": []
      }
    },
    {
      "section_info": {
        "section_number": "5.3",
        "section_title": "Optimizer",
        "full_title": "5.3Optimizer",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "5",
          "parent_section_title": "Training",
          "parent_full_title": "5Training"
        }
      },
      "content": {
        "paragraphs": [
          "We used the Adam optimizer[20]withŒ≤1=0.9subscriptùõΩ10.9\\beta_{1}=0.9italic_Œ≤ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 0.9,Œ≤2=0.98subscriptùõΩ20.98\\beta_{2}=0.98italic_Œ≤ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = 0.98andœµ=10‚àí9italic-œµsuperscript109\\epsilon=10^{-9}italic_œµ = 10 start_POSTSUPERSCRIPT - 9 end_POSTSUPERSCRIPT. We varied the learning rate over the course of training, according to the formula:",
          "[TABLE] : l‚Å¢r‚Å¢a‚Å¢t‚Å¢e=dmodel‚àí0.5‚ãÖmin‚Å°(s‚Å¢t‚Å¢e‚Å¢p‚Å¢_‚Å¢n‚Å¢u‚Å¢m‚àí0.5,s‚Å¢t‚Å¢e‚Å¢p‚Å¢_‚Å¢n‚Å¢u‚Å¢m‚ãÖw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢s‚àí1.5)ùëôùëüùëéùë°ùëí‚ãÖsuperscriptsubscriptùëëmodel0.5ùë†ùë°ùëíùëù_ùëõùë¢superscriptùëö0.5‚ãÖùë†ùë°ùëíùëù_ùëõùë¢ùëöùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùsuperscriptùë†1.5lrate=d_{\\text{model}}^{-0.5}\\cdot\\min({step\\_num}^{-0.5},{step\\_num}\\cdot{%\nwarmup\\_steps}^{-1.5})italic_l italic_r italic_a italic_t italic_e = italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 0.5 end_POSTSUPERSCRIPT ‚ãÖ roman_min ( italic_s italic_t italic_e italic_p _ italic_n italic_u italic_m start_POSTSUPERSCRIPT - 0.5 end_POSTSUPERSCRIPT , italic_s italic_t italic_e italic_p _ italic_n italic_u italic_m ‚ãÖ italic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_s start_POSTSUPERSCRIPT - 1.5 end_POSTSUPERSCRIPT )(3)",
          "This corresponds to increasing the learning rate linearly for the firstw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢sùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùùë†warmup\\_stepsitalic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_straining steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We usedw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢s=4000ùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùùë†4000warmup\\_steps=4000italic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_s = 4000."
        ],
        "full_text": "We used the Adam optimizer[20]withŒ≤1=0.9subscriptùõΩ10.9\\beta_{1}=0.9italic_Œ≤ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 0.9,Œ≤2=0.98subscriptùõΩ20.98\\beta_{2}=0.98italic_Œ≤ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = 0.98andœµ=10‚àí9italic-œµsuperscript109\\epsilon=10^{-9}italic_œµ = 10 start_POSTSUPERSCRIPT - 9 end_POSTSUPERSCRIPT. We varied the learning rate over the course of training, according to the formula: [TABLE] : l‚Å¢r‚Å¢a‚Å¢t‚Å¢e=dmodel‚àí0.5‚ãÖmin‚Å°(s‚Å¢t‚Å¢e‚Å¢p‚Å¢_‚Å¢n‚Å¢u‚Å¢m‚àí0.5,s‚Å¢t‚Å¢e‚Å¢p‚Å¢_‚Å¢n‚Å¢u‚Å¢m‚ãÖw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢s‚àí1.5)ùëôùëüùëéùë°ùëí‚ãÖsuperscriptsubscriptùëëmodel0.5ùë†ùë°ùëíùëù_ùëõùë¢superscriptùëö0.5‚ãÖùë†ùë°ùëíùëù_ùëõùë¢ùëöùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùsuperscriptùë†1.5lrate=d_{\\text{model}}^{-0.5}\\cdot\\min({step\\_num}^{-0.5},{step\\_num}\\cdot{%\nwarmup\\_steps}^{-1.5})italic_l italic_r italic_a italic_t italic_e = italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 0.5 end_POSTSUPERSCRIPT ‚ãÖ roman_min ( italic_s italic_t italic_e italic_p _ italic_n italic_u italic_m start_POSTSUPERSCRIPT - 0.5 end_POSTSUPERSCRIPT , italic_s italic_t italic_e italic_p _ italic_n italic_u italic_m ‚ãÖ italic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_s start_POSTSUPERSCRIPT - 1.5 end_POSTSUPERSCRIPT )(3) This corresponds to increasing the learning rate linearly for the firstw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢sùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùùë†warmup\\_stepsitalic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_straining steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We usedw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢s=4000ùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùùë†4000warmup\\_steps=4000italic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_s = 4000.",
        "citations": [
          "20"
        ],
        "citation_sentences": [
          {
            "sentence": "We used the Adam optimizer[20]withŒ≤1=0.9subscriptùõΩ10.9\\beta_{1}=0.9italic_Œ≤ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 0.9,Œ≤2=0.98subscriptùõΩ20.98\\beta_{2}=0.98italic_Œ≤ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = 0.98andœµ=10‚àí9italic-œµsuperscript109\\epsilon=10^{-9}italic_œµ = 10 start_POSTSUPERSCRIPT - 9 end_POSTSUPERSCRIPT",
            "citation_numbers": [
              "20"
            ],
            "full_paragraph": "We used the Adam optimizer[20]withŒ≤1=0.9subscriptùõΩ10.9\\beta_{1}=0.9italic_Œ≤ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 0.9,Œ≤2=0.98subscriptùõΩ20.98\\beta_{2}=0.98italic_Œ≤ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = 0.98andœµ=10‚àí9italic-œµsuperscript109\\epsilon=10^{-9}italic_œµ = 10 start_POSTSUPERSCRIPT - 9 end_POSTSUPERSCRIPT. We varied the learning rate over the course of training, according to the formula:",
            "context_type": "equation",
            "context_info": {}
          }
        ],
        "total_citations": 1,
        "total_citation_instances": 1,
        "table_contexts": [
          {
            "table_text": "l‚Å¢r‚Å¢a‚Å¢t‚Å¢e=dmodel‚àí0.5‚ãÖmin‚Å°(s‚Å¢t‚Å¢e‚Å¢p‚Å¢_‚Å¢n‚Å¢u‚Å¢m‚àí0.5,s‚Å¢t‚Å¢e‚Å¢p‚Å¢_‚Å¢n‚Å¢u‚Å¢m‚ãÖw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢s‚àí1.5)ùëôùëüùëéùë°ùëí‚ãÖsuperscriptsubscriptùëëmodel0.5ùë†ùë°ùëíùëù_ùëõùë¢superscriptùëö0.5‚ãÖùë†ùë°ùëíùëù_ùëõùë¢ùëöùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùsuperscriptùë†1.5lrate=d_{\\text{model}}^{-0.5}\\cdot\\min({step\\_num}^{-0.5},{step\\_num}\\cdot{%\nwarmup\\_steps}^{-1.5})italic_l italic_r italic_a italic_t italic_e = italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 0.5 end_POSTSUPERSCRIPT ‚ãÖ roman_min ( italic_s italic_t italic_e italic_p _ italic_n italic_u italic_m start_POSTSUPERSCRIPT - 0.5 end_POSTSUPERSCRIPT , italic_s italic_t italic_e italic_p _ italic_n italic_u italic_m ‚ãÖ italic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_s start_POSTSUPERSCRIPT - 1.5 end_POSTSUPERSCRIPT )(3)",
            "caption": "",
            "citations": []
          }
        ]
      }
    },
    {
      "section_info": {
        "section_number": "5.4",
        "section_title": "Regularization",
        "full_title": "5.4Regularization",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "5",
          "parent_section_title": "Training",
          "parent_full_title": "5Training"
        }
      },
      "content": {
        "paragraphs": [
          "We employ three types of regularization during training:",
          "Residual DropoutWe apply dropout[33]to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate ofPd‚Å¢r‚Å¢o‚Å¢p=0.1subscriptùëÉùëëùëüùëúùëù0.1P_{drop}=0.1italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPT = 0.1.",
          "Label SmoothingDuring training, we employed label smoothing of valueœµl‚Å¢s=0.1subscriptitalic-œµùëôùë†0.1\\epsilon_{ls}=0.1italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPT = 0.1[36]. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score."
        ],
        "full_text": "We employ three types of regularization during training: Residual DropoutWe apply dropout[33]to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate ofPd‚Å¢r‚Å¢o‚Å¢p=0.1subscriptùëÉùëëùëüùëúùëù0.1P_{drop}=0.1italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPT = 0.1. Label SmoothingDuring training, we employed label smoothing of valueœµl‚Å¢s=0.1subscriptitalic-œµùëôùë†0.1\\epsilon_{ls}=0.1italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPT = 0.1[36]. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
        "citations": [
          "33",
          "36"
        ],
        "citation_sentences": [
          {
            "sentence": "Residual DropoutWe apply dropout[33]to the output of each sub-layer, before it is added to the sub-layer input and normalized",
            "citation_numbers": [
              "33"
            ],
            "full_paragraph": "Residual DropoutWe apply dropout[33]to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate ofPd‚Å¢r‚Å¢o‚Å¢p=0.1subscriptùëÉùëëùëüùëúùëù0.1P_{drop}=0.1italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPT = 0.1.",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "Label SmoothingDuring training, we employed label smoothing of valueœµl‚Å¢s=0.1subscriptitalic-œµùëôùë†0.1\\epsilon_{ls}=0.1italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPT = 0.1[36]",
            "citation_numbers": [
              "36"
            ],
            "full_paragraph": "Label SmoothingDuring training, we employed label smoothing of valueœµl‚Å¢s=0.1subscriptitalic-œµùëôùë†0.1\\epsilon_{ls}=0.1italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPT = 0.1[36]. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
            "context_type": "equation",
            "context_info": {}
          }
        ],
        "total_citations": 2,
        "total_citation_instances": 2,
        "table_contexts": []
      }
    },
    {
      "section_info": {
        "section_number": "6.1",
        "section_title": "Machine Translation",
        "full_title": "6.1Machine Translation",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "6",
          "parent_section_title": "Results",
          "parent_full_title": "6Results"
        }
      },
      "content": {
        "paragraphs": [
          "[TABLE] : Table 2:The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.ModelBLEUTraining Cost (FLOPs)EN-DEEN-FREN-DEEN-FRByteNet[18]23.75Deep-Att + PosUnk[39]39.21.0‚ãÖ1020‚ãÖ1.0superscript10201.0\\cdot 10^{20}1.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL[38]24.639.922.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.4‚ãÖ1020‚ãÖ1.4superscript10201.4\\cdot 10^{20}1.4 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTConvS2S[9]25.1640.469.6‚ãÖ1018‚ãÖ9.6superscript10189.6\\cdot 10^{18}9.6 ‚ãÖ 10 start_POSTSUPERSCRIPT 18 end_POSTSUPERSCRIPT1.5‚ãÖ1020‚ãÖ1.5superscript10201.5\\cdot 10^{20}1.5 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTMoE[32]26.0340.562.0‚ãÖ1019‚ãÖ2.0superscript10192.0\\cdot 10^{19}2.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1020‚ãÖ1.2superscript10201.2\\cdot 10^{20}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTDeep-Att + PosUnk Ensemble[39]40.48.0‚ãÖ1020‚ãÖ8.0superscript10208.0\\cdot 10^{20}8.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL Ensemble[38]26.3041.161.8‚ãÖ1020‚ãÖ1.8superscript10201.8\\cdot 10^{20}1.8 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPT1.1‚ãÖ1021‚ãÖ1.1superscript10211.1\\cdot 10^{21}1.1 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTConvS2S Ensemble[9]26.3641.297.7‚ãÖ1019‚ãÖ7.7superscript10197.7\\cdot 10^{19}7.7 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1021‚ãÖ1.2superscript10211.2\\cdot 10^{21}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTTransformer (base model)27.338.13.3‚ãÖùüèùüéùüèùüñbold-‚ãÖ3.3superscript10183.3\\cdot 10^{18}bold_3.3 bold_‚ãÖ bold_10 start_POSTSUPERSCRIPT bold_18 end_POSTSUPERSCRIPTTransformer (big)28.441.82.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT",
          "On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table2) outperforms the best previously reported models (including ensembles) by more than2.02.02.02.0BLEU, establishing a new state-of-the-art BLEU score of28.428.428.428.4. The configuration of this model is listed in the bottom line of Table3. Training took3.53.53.53.5days on8888P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models.",
          "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of41.041.041.041.0, outperforming all of the previously published single models, at less than1/4141/41 / 4the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout ratePd‚Å¢r‚Å¢o‚Å¢p=0.1subscriptùëÉùëëùëüùëúùëù0.1P_{drop}=0.1italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPT = 0.1, instead of0.30.30.30.3.",
          "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length +50505050, but terminate early when possible[38].",
          "Table2summarizes our results and compares our translation quality and training costs to other model architectures from the literature. We estimate the number of floating point operations used to train a model by multiplying the training time, the number of GPUs used, and an estimate of the sustained single-precision floating-point capacity of each GPU222We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.."
        ],
        "full_text": "[TABLE] : Table 2:The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.ModelBLEUTraining Cost (FLOPs)EN-DEEN-FREN-DEEN-FRByteNet[18]23.75Deep-Att + PosUnk[39]39.21.0‚ãÖ1020‚ãÖ1.0superscript10201.0\\cdot 10^{20}1.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL[38]24.639.922.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.4‚ãÖ1020‚ãÖ1.4superscript10201.4\\cdot 10^{20}1.4 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTConvS2S[9]25.1640.469.6‚ãÖ1018‚ãÖ9.6superscript10189.6\\cdot 10^{18}9.6 ‚ãÖ 10 start_POSTSUPERSCRIPT 18 end_POSTSUPERSCRIPT1.5‚ãÖ1020‚ãÖ1.5superscript10201.5\\cdot 10^{20}1.5 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTMoE[32]26.0340.562.0‚ãÖ1019‚ãÖ2.0superscript10192.0\\cdot 10^{19}2.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1020‚ãÖ1.2superscript10201.2\\cdot 10^{20}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTDeep-Att + PosUnk Ensemble[39]40.48.0‚ãÖ1020‚ãÖ8.0superscript10208.0\\cdot 10^{20}8.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL Ensemble[38]26.3041.161.8‚ãÖ1020‚ãÖ1.8superscript10201.8\\cdot 10^{20}1.8 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPT1.1‚ãÖ1021‚ãÖ1.1superscript10211.1\\cdot 10^{21}1.1 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTConvS2S Ensemble[9]26.3641.297.7‚ãÖ1019‚ãÖ7.7superscript10197.7\\cdot 10^{19}7.7 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1021‚ãÖ1.2superscript10211.2\\cdot 10^{21}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTTransformer (base model)27.338.13.3‚ãÖùüèùüéùüèùüñbold-‚ãÖ3.3superscript10183.3\\cdot 10^{18}bold_3.3 bold_‚ãÖ bold_10 start_POSTSUPERSCRIPT bold_18 end_POSTSUPERSCRIPTTransformer (big)28.441.82.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table2) outperforms the best previously reported models (including ensembles) by more than2.02.02.02.0BLEU, establishing a new state-of-the-art BLEU score of28.428.428.428.4. The configuration of this model is listed in the bottom line of Table3. Training took3.53.53.53.5days on8888P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models. On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of41.041.041.041.0, outperforming all of the previously published single models, at less than1/4141/41 / 4the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout ratePd‚Å¢r‚Å¢o‚Å¢p=0.1subscriptùëÉùëëùëüùëúùëù0.1P_{drop}=0.1italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPT = 0.1, instead of0.30.30.30.3. For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length +50505050, but terminate early when possible[38]. Table2summarizes our results and compares our translation quality and training costs to other model architectures from the literature. We estimate the number of floating point operations used to train a model by multiplying the training time, the number of GPUs used, and an estimate of the sustained single-precision floating-point capacity of each GPU222We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively..",
        "citations": [
          "9",
          "18",
          "32",
          "38",
          "39"
        ],
        "citation_sentences": [
          {
            "sentence": "[TABLE] : Table 2:The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.ModelBLEUTraining Cost (FLOPs)EN-DEEN-FREN-DEEN-FRByteNet[18]23.75Deep-Att + PosUnk[39]39.21.0‚ãÖ1020‚ãÖ1.0superscript10201.0\\cdot 10^{20}1.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL[38]24.639.922.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.4‚ãÖ1020‚ãÖ1.4superscript10201.4\\cdot 10^{20}1.4 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTConvS2S[9]25.1640.469.6‚ãÖ1018‚ãÖ9.6superscript10189.6\\cdot 10^{18}9.6 ‚ãÖ 10 start_POSTSUPERSCRIPT 18 end_POSTSUPERSCRIPT1.5‚ãÖ1020‚ãÖ1.5superscript10201.5\\cdot 10^{20}1.5 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTMoE[32]26.0340.562.0‚ãÖ1019‚ãÖ2.0superscript10192.0\\cdot 10^{19}2.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1020‚ãÖ1.2superscript10201.2\\cdot 10^{20}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTDeep-Att + PosUnk Ensemble[39]40.48.0‚ãÖ1020‚ãÖ8.0superscript10208.0\\cdot 10^{20}8.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL Ensemble[38]26.3041.161.8‚ãÖ1020‚ãÖ1.8superscript10201.8\\cdot 10^{20}1.8 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPT1.1‚ãÖ1021‚ãÖ1.1superscript10211.1\\cdot 10^{21}1.1 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTConvS2S Ensemble[9]26.3641.297.7‚ãÖ1019‚ãÖ7.7superscript10197.7\\cdot 10^{19}7.7 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1021‚ãÖ1.2superscript10211.2\\cdot 10^{21}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTTransformer (base model)27.338.13.3‚ãÖùüèùüéùüèùüñbold-‚ãÖ3.3superscript10183.3\\cdot 10^{18}bold_3.3 bold_‚ãÖ bold_10 start_POSTSUPERSCRIPT bold_18 end_POSTSUPERSCRIPTTransformer (big)28.441.82.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT",
            "citation_numbers": [
              "18",
              "39",
              "38",
              "9",
              "32"
            ],
            "full_paragraph": "[TABLE] : Table 2:The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.ModelBLEUTraining Cost (FLOPs)EN-DEEN-FREN-DEEN-FRByteNet[18]23.75Deep-Att + PosUnk[39]39.21.0‚ãÖ1020‚ãÖ1.0superscript10201.0\\cdot 10^{20}1.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL[38]24.639.922.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.4‚ãÖ1020‚ãÖ1.4superscript10201.4\\cdot 10^{20}1.4 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTConvS2S[9]25.1640.469.6‚ãÖ1018‚ãÖ9.6superscript10189.6\\cdot 10^{18}9.6 ‚ãÖ 10 start_POSTSUPERSCRIPT 18 end_POSTSUPERSCRIPT1.5‚ãÖ1020‚ãÖ1.5superscript10201.5\\cdot 10^{20}1.5 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTMoE[32]26.0340.562.0‚ãÖ1019‚ãÖ2.0superscript10192.0\\cdot 10^{19}2.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1020‚ãÖ1.2superscript10201.2\\cdot 10^{20}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTDeep-Att + PosUnk Ensemble[39]40.48.0‚ãÖ1020‚ãÖ8.0superscript10208.0\\cdot 10^{20}8.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL Ensemble[38]26.3041.161.8‚ãÖ1020‚ãÖ1.8superscript10201.8\\cdot 10^{20}1.8 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPT1.1‚ãÖ1021‚ãÖ1.1superscript10211.1\\cdot 10^{21}1.1 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTConvS2S Ensemble[9]26.3641.297.7‚ãÖ1019‚ãÖ7.7superscript10197.7\\cdot 10^{19}7.7 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1021‚ãÖ1.2superscript10211.2\\cdot 10^{21}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTTransformer (base model)27.338.13.3‚ãÖùüèùüéùüèùüñbold-‚ãÖ3.3superscript10183.3\\cdot 10^{18}bold_3.3 bold_‚ãÖ bold_10 start_POSTSUPERSCRIPT bold_18 end_POSTSUPERSCRIPTTransformer (big)28.441.82.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT",
            "context_type": "table",
            "context_info": {
              "table_caption": "the transformer achieves better bleu scores than previous state-of-the-art models on the english-to-german and english-to-french newstest2014 tests at a fraction of the training cost"
            }
          },
          {
            "sentence": "We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]",
            "citation_numbers": [
              "38"
            ],
            "full_paragraph": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length +50505050, but terminate early when possible[38].",
            "context_type": "equation",
            "context_info": {}
          },
          {
            "sentence": "We set the maximum output length during inference to input length +50505050, but terminate early when possible[38].",
            "citation_numbers": [
              "38"
            ],
            "full_paragraph": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length +50505050, but terminate early when possible[38].",
            "context_type": "text",
            "context_info": {}
          }
        ],
        "total_citations": 5,
        "total_citation_instances": 3,
        "table_contexts": [
          {
            "table_text": "Table 2:The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.ModelBLEUTraining Cost (FLOPs)EN-DEEN-FREN-DEEN-FRByteNet[18]23.75Deep-Att + PosUnk[39]39.21.0‚ãÖ1020‚ãÖ1.0superscript10201.0\\cdot 10^{20}1.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL[38]24.639.922.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.4‚ãÖ1020‚ãÖ1.4superscript10201.4\\cdot 10^{20}1.4 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTConvS2S[9]25.1640.469.6‚ãÖ1018‚ãÖ9.6superscript10189.6\\cdot 10^{18}9.6 ‚ãÖ 10 start_POSTSUPERSCRIPT 18 end_POSTSUPERSCRIPT1.5‚ãÖ1020‚ãÖ1.5superscript10201.5\\cdot 10^{20}1.5 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTMoE[32]26.0340.562.0‚ãÖ1019‚ãÖ2.0superscript10192.0\\cdot 10^{19}2.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1020‚ãÖ1.2superscript10201.2\\cdot 10^{20}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTDeep-Att + PosUnk Ensemble[39]40.48.0‚ãÖ1020‚ãÖ8.0superscript10208.0\\cdot 10^{20}8.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL Ensemble[38]26.3041.161.8‚ãÖ1020‚ãÖ1.8superscript10201.8\\cdot 10^{20}1.8 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPT1.1‚ãÖ1021‚ãÖ1.1superscript10211.1\\cdot 10^{21}1.1 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTConvS2S Ensemble[9]26.3641.297.7‚ãÖ1019‚ãÖ7.7superscript10197.7\\cdot 10^{19}7.7 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1021‚ãÖ1.2superscript10211.2\\cdot 10^{21}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTTransformer (base model)27.338.13.3‚ãÖùüèùüéùüèùüñbold-‚ãÖ3.3superscript10183.3\\cdot 10^{18}bold_3.3 bold_‚ãÖ bold_10 start_POSTSUPERSCRIPT bold_18 end_POSTSUPERSCRIPTTransformer (big)28.441.82.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT",
            "caption": "",
            "citations": [
              "18",
              "39",
              "38",
              "9",
              "32",
              "39",
              "38",
              "9"
            ]
          }
        ]
      }
    },
    {
      "section_info": {
        "section_number": "6.2",
        "section_title": "Model Variations",
        "full_title": "6.2Model Variations",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "6",
          "parent_section_title": "Results",
          "parent_full_title": "6Results"
        }
      },
      "content": {
        "paragraphs": [
          "[TABLE] : Table 3:Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.NùëÅNitalic_Ndmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTdffsubscriptùëëffd_{\\text{ff}}italic_d start_POSTSUBSCRIPT ff end_POSTSUBSCRIPTh‚Ñéhitalic_hdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTdvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPTPd‚Å¢r‚Å¢o‚Å¢psubscriptùëÉùëëùëüùëúùëùP_{drop}italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPTœµl‚Å¢ssubscriptitalic-œµùëôùë†\\epsilon_{ls}italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPTtrainPPLBLEUparamssteps(dev)(dev)√ó106absentsuperscript106\\times 10^{6}√ó 10 start_POSTSUPERSCRIPT 6 end_POSTSUPERSCRIPTbase65122048864640.10.1100K4.9225.865(A)15125125.2924.941281285.0025.51632324.9125.83216165.0125.4(B)165.1625.158325.0125.460(C)26.1123.73645.1925.35084.8825.58025632325.7524.52810241281284.6626.016810245.1225.45340964.7526.290(D)0.05.7724.60.24.9525.50.04.6725.30.25.4725.7(E)positional embedding instead of sinusoids4.9225.7big610244096160.3300K4.3326.4213",
          "To evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the development set, newstest2013. We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table3.",
          "In Table3rows (A), we vary the number of attention heads and the attention key and value dimensions, keeping the amount of computation constant, as described in Section3.2.2. While single-head attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.",
          "In Table3rows (B), we observe that reducing the attention key sizedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPThurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings[9], and observe nearly identical results to the base model."
        ],
        "full_text": "[TABLE] : Table 3:Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.NùëÅNitalic_Ndmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTdffsubscriptùëëffd_{\\text{ff}}italic_d start_POSTSUBSCRIPT ff end_POSTSUBSCRIPTh‚Ñéhitalic_hdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTdvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPTPd‚Å¢r‚Å¢o‚Å¢psubscriptùëÉùëëùëüùëúùëùP_{drop}italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPTœµl‚Å¢ssubscriptitalic-œµùëôùë†\\epsilon_{ls}italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPTtrainPPLBLEUparamssteps(dev)(dev)√ó106absentsuperscript106\\times 10^{6}√ó 10 start_POSTSUPERSCRIPT 6 end_POSTSUPERSCRIPTbase65122048864640.10.1100K4.9225.865(A)15125125.2924.941281285.0025.51632324.9125.83216165.0125.4(B)165.1625.158325.0125.460(C)26.1123.73645.1925.35084.8825.58025632325.7524.52810241281284.6626.016810245.1225.45340964.7526.290(D)0.05.7724.60.24.9525.50.04.6725.30.25.4725.7(E)positional embedding instead of sinusoids4.9225.7big610244096160.3300K4.3326.4213 To evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the development set, newstest2013. We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table3. In Table3rows (A), we vary the number of attention heads and the attention key and value dimensions, keeping the amount of computation constant, as described in Section3.2.2. While single-head attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads. In Table3rows (B), we observe that reducing the attention key sizedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPThurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings[9], and observe nearly identical results to the base model.",
        "citations": [
          "9"
        ],
        "citation_sentences": [
          {
            "sentence": "In row (E) we replace our sinusoidal positional encoding with learned positional embeddings[9], and observe nearly identical results to the base model.",
            "citation_numbers": [
              "9"
            ],
            "full_paragraph": "In Table3rows (B), we observe that reducing the attention key sizedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPThurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings[9], and observe nearly identical results to the base model.",
            "context_type": "table",
            "context_info": {
              "table_caption": "variations on the transformer architecture"
            }
          }
        ],
        "total_citations": 1,
        "total_citation_instances": 1,
        "table_contexts": [
          {
            "table_text": "Table 3:Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.NùëÅNitalic_Ndmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTdffsubscriptùëëffd_{\\text{ff}}italic_d start_POSTSUBSCRIPT ff end_POSTSUBSCRIPTh‚Ñéhitalic_hdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTdvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPTPd‚Å¢r‚Å¢o‚Å¢psubscriptùëÉùëëùëüùëúùëùP_{drop}italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPTœµl‚Å¢ssubscriptitalic-œµùëôùë†\\epsilon_{ls}italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPTtrainPPLBLEUparamssteps(dev)(dev)√ó106absentsuperscript106\\times 10^{6}√ó 10 start_POSTSUPERSCRIPT 6 end_POSTSUPERSCRIPTbase65122048864640.10.1100K4.9225.865(A)15125125.2924.941281285.0025.51632324.9125.83216165.0125.4(B)165.1625.158325.0125.460(C)26.1123.73645.1925.35084.8825.58025632325.7524.52810241281284.6626.016810245.1225.45340964.7526.290(D)0.05.7724.60.24.9525.50.04.6725.30.25.4725.7(E)positional embedding instead of sinusoids4.9225.7big610244096160.3300K4.3326.4213",
            "caption": "",
            "citations": []
          }
        ]
      }
    },
    {
      "section_info": {
        "section_number": "6.3",
        "section_title": "English Constituency Parsing",
        "full_title": "6.3English Constituency Parsing",
        "section_type": "subsection",
        "parent_section": {
          "parent_section_number": "6",
          "parent_section_title": "Results",
          "parent_full_title": "6Results"
        }
      },
      "content": {
        "paragraphs": [
          "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
          "To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input.\nFurthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes[37].",
          "We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.",
          "We performed only a small number of experiments to select the dropout, both attention and residual (section5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length +300300300300. We used a beam size of21212121andŒ±=0.3ùõº0.3\\alpha=0.3italic_Œ± = 0.3for both WSJ only and the semi-supervised setting.",
          "Our results in Table4show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar[8].",
          "In contrast to RNN sequence-to-sequence models[37], the Transformer outperforms the BerkeleyParser[29]even when training only on the WSJ training set of 40K sentences."
        ],
        "full_text": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3 To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input.\nFurthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes[37]. We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting. We performed only a small number of experiments to select the dropout, both attention and residual (section5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length +300300300300. We used a beam size of21212121andŒ±=0.3ùõº0.3\\alpha=0.3italic_Œ± = 0.3for both WSJ only and the semi-supervised setting. Our results in Table4show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar[8]. In contrast to RNN sequence-to-sequence models[37], the Transformer outperforms the BerkeleyParser[29]even when training only on the WSJ training set of 40K sentences.",
        "citations": [
          "8",
          "14",
          "23",
          "25",
          "26",
          "29",
          "37",
          "40"
        ],
        "citation_sentences": [
          {
            "sentence": "(2014)[37]WSJ only, discriminative88.3Petrov et al",
            "citation_numbers": [
              "37"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "(2006)[29]WSJ only, discriminative90.4Zhu et al",
            "citation_numbers": [
              "29"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "(2013)[40]WSJ only, discriminative90.4Dyer et al",
            "citation_numbers": [
              "40"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "(2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al",
            "citation_numbers": [
              "8"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "(2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al",
            "citation_numbers": [
              "40",
              "14"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "(2006)[26]semi-supervised92.1Vinyals & Kaiser el al",
            "citation_numbers": [
              "26"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "(2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al",
            "citation_numbers": [
              "37"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "(2015)[23]multi-task93.0Dyer et al",
            "citation_numbers": [
              "23"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "(2016)[8]generative93.3",
            "citation_numbers": [
              "8"
            ],
            "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes[37].",
            "citation_numbers": [
              "37"
            ],
            "full_paragraph": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input.\nFurthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes[37].",
            "context_type": "table",
            "context_info": {
              "table_caption": "the transformer generalizes well to english constituency parsing (results are on section 23 of wsj)parsertrainingwsj 23 f1vinyals & kaiser el al"
            }
          },
          {
            "sentence": "We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences",
            "citation_numbers": [
              "25"
            ],
            "full_paragraph": "We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.",
            "context_type": "table",
            "context_info": {}
          },
          {
            "sentence": "We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]",
            "citation_numbers": [
              "37"
            ],
            "full_paragraph": "We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.",
            "context_type": "text",
            "context_info": {}
          },
          {
            "sentence": "Our results in Table4show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar[8].",
            "citation_numbers": [
              "8"
            ],
            "full_paragraph": "Our results in Table4show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar[8].",
            "context_type": "table",
            "context_info": {
              "table_caption": "the transformer generalizes well to english constituency parsing (results are on section 23 of wsj)parsertrainingwsj 23 f1vinyals & kaiser el al"
            }
          },
          {
            "sentence": "In contrast to RNN sequence-to-sequence models[37], the Transformer outperforms the BerkeleyParser[29]even when training only on the WSJ training set of 40K sentences.",
            "citation_numbers": [
              "37",
              "29"
            ],
            "full_paragraph": "In contrast to RNN sequence-to-sequence models[37], the Transformer outperforms the BerkeleyParser[29]even when training only on the WSJ training set of 40K sentences.",
            "context_type": "table",
            "context_info": {
              "table_caption": "the transformer generalizes well to english constituency parsing (results are on section 23 of wsj)parsertrainingwsj 23 f1vinyals & kaiser el al"
            }
          }
        ],
        "total_citations": 8,
        "total_citation_instances": 14,
        "table_contexts": [
          {
            "table_text": "Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
            "caption": "",
            "citations": [
              "37",
              "29",
              "40",
              "8",
              "40",
              "14",
              "26",
              "37",
              "23",
              "8"
            ]
          }
        ]
      }
    },
    {
      "section_info": {
        "section_number": "7",
        "section_title": "Conclusion",
        "full_title": "7Conclusion",
        "section_type": "section",
        "parent_section": null
      },
      "content": {
        "paragraphs": [
          "In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention.",
          "For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles.",
          "We are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video.\nMaking generation less sequential is another research goals of ours.",
          "The code we used to train and evaluate our models is available athttps://github.com/tensorflow/tensor2tensor.",
          "AcknowledgementsWe are grateful to Nal Kalchbrenner and Stephan Gouws for\ntheir fruitful comments, corrections and inspiration."
        ],
        "full_text": "In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention. For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles. We are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video.\nMaking generation less sequential is another research goals of ours. The code we used to train and evaluate our models is available athttps://github.com/tensorflow/tensor2tensor. AcknowledgementsWe are grateful to Nal Kalchbrenner and Stephan Gouws for\ntheir fruitful comments, corrections and inspiration.",
        "citations": [],
        "citation_sentences": [],
        "total_citations": 0,
        "total_citation_instances": 0,
        "table_contexts": []
      }
    }
  ],
  "global_summary": {
    "all_citations": [
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "11",
      "12",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "20",
      "21",
      "22",
      "23",
      "24",
      "25",
      "26",
      "27",
      "28",
      "29",
      "30",
      "31",
      "32",
      "33",
      "34",
      "35",
      "36",
      "37",
      "38",
      "39",
      "40"
    ],
    "all_citation_sentences": [
      {
        "sentence": "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]",
        "citation_numbers": [
          "13",
          "7",
          "35",
          "2",
          "5"
        ],
        "full_paragraph": "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15].",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15].",
        "citation_numbers": [
          "38",
          "24",
          "15"
        ],
        "full_paragraph": "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15].",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "Recent work has achieved significant improvements in computational efficiency through factorization tricks[21]and conditional computation[32], while also improving model performance in case of the latter",
        "citation_numbers": [
          "21",
          "32"
        ],
        "full_paragraph": "Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden stateshtsubscript‚Ñéùë°h_{t}italic_h start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT, as a function of the previous hidden stateht‚àí1subscript‚Ñéùë°1h_{t-1}italic_h start_POSTSUBSCRIPT italic_t - 1 end_POSTSUBSCRIPTand the input for positiontùë°titalic_t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples.\nRecent work has achieved significant improvements in computational efficiency through factorization tricks[21]and conditional computation[32], while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]",
        "citation_numbers": [
          "2",
          "19"
        ],
        "full_paragraph": "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]. In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network.",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network.",
        "citation_numbers": [
          "27"
        ],
        "full_paragraph": "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]. In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions",
        "citation_numbers": [
          "16",
          "18",
          "9"
        ],
        "full_paragraph": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions[12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section3.2.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "This makes it more difficult to learn dependencies between distant positions[12]",
        "citation_numbers": [
          "12"
        ],
        "full_paragraph": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions[12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section3.2.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations[4,27,28,22].",
        "citation_numbers": [
          "4",
          "27",
          "28",
          "22"
        ],
        "full_paragraph": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations[4,27,28,22].",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks[34].",
        "citation_numbers": [
          "34"
        ],
        "full_paragraph": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks[34].",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as[17,18]and[9].",
        "citation_numbers": [
          "17",
          "18",
          "9"
        ],
        "full_paragraph": "To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution.\nIn the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as[17,18]and[9].",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "We employ a residual connection[11]around each of the two sub-layers, followed by layer normalization[1]",
        "citation_numbers": [
          "11",
          "1"
        ],
        "full_paragraph": "Encoder:The encoder is composed of a stack ofN=6ùëÅ6N=6italic_N = 6identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection[11]around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer isLayerNorm‚Å¢(x+Sublayer‚Å¢(x))LayerNormùë•Sublayerùë•\\mathrm{LayerNorm}(x+\\mathrm{Sublayer}(x))roman_LayerNorm ( italic_x + roman_Sublayer ( italic_x ) ), whereSublayer‚Å¢(x)Sublayerùë•\\mathrm{Sublayer}(x)roman_Sublayer ( italic_x )is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimensiondmodel=512subscriptùëëmodel512d_{\\text{model}}=512italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT = 512.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention",
        "citation_numbers": [
          "2"
        ],
        "full_paragraph": "[TABLE] : 3.2.1Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimensiondksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, and values of dimensiondvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT. We compute the dot products of the query with all keys, divide each bydksubscriptùëëùëò\\sqrt{d_{k}}square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG, and apply a softmax function to obtain the weights on the values.In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrixQùëÑQitalic_Q. The keys and values are also packed together into matricesKùêæKitalic_KandVùëâVitalic_V. We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]. We suspect that for large values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients111To illustrate why the dot products get large, assume that the components ofqùëûqitalic_qandkùëòkitalic_kare independent random variables with mean00and variance1111. Then their dot product,q‚ãÖk=‚àëi=1dkqi‚Å¢ki‚ãÖùëûùëòsuperscriptsubscriptùëñ1subscriptùëëùëòsubscriptùëûùëñsubscriptùëòùëñq\\cdot k=\\sum_{i=1}^{d_{k}}q_{i}k_{i}italic_q ‚ãÖ italic_k = ‚àë start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, has mean00and variancedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT.. To counteract this effect, we scale the dot products by1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG.",
        "context_type": "equation",
        "context_info": {}
      },
      {
        "sentence": "While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]",
        "citation_numbers": [
          "3"
        ],
        "full_paragraph": "[TABLE] : 3.2.1Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimensiondksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, and values of dimensiondvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT. We compute the dot products of the query with all keys, divide each bydksubscriptùëëùëò\\sqrt{d_{k}}square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG, and apply a softmax function to obtain the weights on the values.In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrixQùëÑQitalic_Q. The keys and values are also packed together into matricesKùêæKitalic_KandVùëâVitalic_V. We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]. We suspect that for large values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients111To illustrate why the dot products get large, assume that the components ofqùëûqitalic_qandkùëòkitalic_kare independent random variables with mean00and variance1111. Then their dot product,q‚ãÖk=‚àëi=1dkqi‚Å¢ki‚ãÖùëûùëòsuperscriptsubscriptùëñ1subscriptùëëùëòsubscriptùëûùëñsubscriptùëòùëñq\\cdot k=\\sum_{i=1}^{d_{k}}q_{i}k_{i}italic_q ‚ãÖ italic_k = ‚àë start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, has mean00and variancedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT.. To counteract this effect, we scale the dot products by1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9].‚Ä¢The encoder contains self-attention layers",
        "citation_numbers": [
          "38",
          "2",
          "9"
        ],
        "full_paragraph": "3.2.3Applications of Attention in our ModelThe Transformer uses multi-head attention in three different ways:‚Ä¢In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9].‚Ä¢The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.‚Ä¢Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to‚àí‚àû-\\infty- ‚àû) all values in the input of the softmax which correspond to illegal connections. See Figure2.",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to[30]",
        "citation_numbers": [
          "30"
        ],
        "full_paragraph": "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to[30]. In the embedding layers, we multiply those weights bydmodelsubscriptùëëmodel\\sqrt{d_{\\text{model}}}square-root start_ARG italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_ARG.",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "There are many choices of positional encodings, learned and fixed[9].",
        "citation_numbers": [
          "9"
        ],
        "full_paragraph": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTas the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed[9].",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "We also experimented with using learned positional embeddings[9]instead, and found that the two versions produced nearly identical results (see Table3row (E))",
        "citation_numbers": [
          "9"
        ],
        "full_paragraph": "We also experimented with using learned positional embeddings[9]instead, and found that the two versions produced nearly identical results (see Table3row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.",
        "context_type": "table",
        "context_info": {
          "table_caption": "row (e))"
        }
      },
      {
        "sentence": "The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies[12]",
        "citation_numbers": [
          "12"
        ],
        "full_paragraph": "The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies[12]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence lengthnùëõnitalic_nis smaller than the representation dimensionalitydùëëditalic_d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece[38]and byte-pair[31]representations",
        "citation_numbers": [
          "38",
          "31"
        ],
        "full_paragraph": "As noted in Table1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requiresO‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )sequential operations.\nIn terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence lengthnùëõnitalic_nis smaller than the representation dimensionalitydùëëditalic_d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece[38]and byte-pair[31]representations.\nTo improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of sizerùëüritalic_rin the input sequence centered around the respective output position. This would increase the maximum path length toO‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r ). We plan to investigate this approach further in future work.",
        "context_type": "table",
        "context_info": {
          "table_caption": ", a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requireso‚Å¢(n)ùëÇùëõo(n)italic_o ( italic_n )sequential operations"
        }
      },
      {
        "sentence": "Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network",
        "citation_numbers": [
          "18"
        ],
        "full_paragraph": "A single convolutional layer with kernel widthk<nùëòùëõk<nitalic_k < italic_ndoes not connect all pairs of input and output positions. Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network.\nConvolutional layers are generally more expensive than recurrent layers, by a factor ofkùëòkitalic_k. Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ). Even withk=nùëòùëõk=nitalic_k = italic_n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )",
        "citation_numbers": [
          "6"
        ],
        "full_paragraph": "A single convolutional layer with kernel widthk<nùëòùëõk<nitalic_k < italic_ndoes not connect all pairs of input and output positions. Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network.\nConvolutional layers are generally more expensive than recurrent layers, by a factor ofkùëòkitalic_k. Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ). Even withk=nùëòùëõk=nitalic_k = italic_n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.",
        "context_type": "equation",
        "context_info": {}
      },
      {
        "sentence": "Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens",
        "citation_numbers": [
          "3"
        ],
        "full_paragraph": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]",
        "citation_numbers": [
          "38"
        ],
        "full_paragraph": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "We used the Adam optimizer[20]withŒ≤1=0.9subscriptùõΩ10.9\\beta_{1}=0.9italic_Œ≤ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 0.9,Œ≤2=0.98subscriptùõΩ20.98\\beta_{2}=0.98italic_Œ≤ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = 0.98andœµ=10‚àí9italic-œµsuperscript109\\epsilon=10^{-9}italic_œµ = 10 start_POSTSUPERSCRIPT - 9 end_POSTSUPERSCRIPT",
        "citation_numbers": [
          "20"
        ],
        "full_paragraph": "We used the Adam optimizer[20]withŒ≤1=0.9subscriptùõΩ10.9\\beta_{1}=0.9italic_Œ≤ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 0.9,Œ≤2=0.98subscriptùõΩ20.98\\beta_{2}=0.98italic_Œ≤ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = 0.98andœµ=10‚àí9italic-œµsuperscript109\\epsilon=10^{-9}italic_œµ = 10 start_POSTSUPERSCRIPT - 9 end_POSTSUPERSCRIPT. We varied the learning rate over the course of training, according to the formula:",
        "context_type": "equation",
        "context_info": {}
      },
      {
        "sentence": "Residual DropoutWe apply dropout[33]to the output of each sub-layer, before it is added to the sub-layer input and normalized",
        "citation_numbers": [
          "33"
        ],
        "full_paragraph": "Residual DropoutWe apply dropout[33]to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate ofPd‚Å¢r‚Å¢o‚Å¢p=0.1subscriptùëÉùëëùëüùëúùëù0.1P_{drop}=0.1italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPT = 0.1.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "Label SmoothingDuring training, we employed label smoothing of valueœµl‚Å¢s=0.1subscriptitalic-œµùëôùë†0.1\\epsilon_{ls}=0.1italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPT = 0.1[36]",
        "citation_numbers": [
          "36"
        ],
        "full_paragraph": "Label SmoothingDuring training, we employed label smoothing of valueœµl‚Å¢s=0.1subscriptitalic-œµùëôùë†0.1\\epsilon_{ls}=0.1italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPT = 0.1[36]. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
        "context_type": "equation",
        "context_info": {}
      },
      {
        "sentence": "[TABLE] : Table 2:The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.ModelBLEUTraining Cost (FLOPs)EN-DEEN-FREN-DEEN-FRByteNet[18]23.75Deep-Att + PosUnk[39]39.21.0‚ãÖ1020‚ãÖ1.0superscript10201.0\\cdot 10^{20}1.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL[38]24.639.922.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.4‚ãÖ1020‚ãÖ1.4superscript10201.4\\cdot 10^{20}1.4 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTConvS2S[9]25.1640.469.6‚ãÖ1018‚ãÖ9.6superscript10189.6\\cdot 10^{18}9.6 ‚ãÖ 10 start_POSTSUPERSCRIPT 18 end_POSTSUPERSCRIPT1.5‚ãÖ1020‚ãÖ1.5superscript10201.5\\cdot 10^{20}1.5 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTMoE[32]26.0340.562.0‚ãÖ1019‚ãÖ2.0superscript10192.0\\cdot 10^{19}2.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1020‚ãÖ1.2superscript10201.2\\cdot 10^{20}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTDeep-Att + PosUnk Ensemble[39]40.48.0‚ãÖ1020‚ãÖ8.0superscript10208.0\\cdot 10^{20}8.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL Ensemble[38]26.3041.161.8‚ãÖ1020‚ãÖ1.8superscript10201.8\\cdot 10^{20}1.8 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPT1.1‚ãÖ1021‚ãÖ1.1superscript10211.1\\cdot 10^{21}1.1 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTConvS2S Ensemble[9]26.3641.297.7‚ãÖ1019‚ãÖ7.7superscript10197.7\\cdot 10^{19}7.7 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1021‚ãÖ1.2superscript10211.2\\cdot 10^{21}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTTransformer (base model)27.338.13.3‚ãÖùüèùüéùüèùüñbold-‚ãÖ3.3superscript10183.3\\cdot 10^{18}bold_3.3 bold_‚ãÖ bold_10 start_POSTSUPERSCRIPT bold_18 end_POSTSUPERSCRIPTTransformer (big)28.441.82.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT",
        "citation_numbers": [
          "18",
          "39",
          "38",
          "9",
          "32"
        ],
        "full_paragraph": "[TABLE] : Table 2:The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.ModelBLEUTraining Cost (FLOPs)EN-DEEN-FREN-DEEN-FRByteNet[18]23.75Deep-Att + PosUnk[39]39.21.0‚ãÖ1020‚ãÖ1.0superscript10201.0\\cdot 10^{20}1.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL[38]24.639.922.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.4‚ãÖ1020‚ãÖ1.4superscript10201.4\\cdot 10^{20}1.4 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTConvS2S[9]25.1640.469.6‚ãÖ1018‚ãÖ9.6superscript10189.6\\cdot 10^{18}9.6 ‚ãÖ 10 start_POSTSUPERSCRIPT 18 end_POSTSUPERSCRIPT1.5‚ãÖ1020‚ãÖ1.5superscript10201.5\\cdot 10^{20}1.5 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTMoE[32]26.0340.562.0‚ãÖ1019‚ãÖ2.0superscript10192.0\\cdot 10^{19}2.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1020‚ãÖ1.2superscript10201.2\\cdot 10^{20}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTDeep-Att + PosUnk Ensemble[39]40.48.0‚ãÖ1020‚ãÖ8.0superscript10208.0\\cdot 10^{20}8.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL Ensemble[38]26.3041.161.8‚ãÖ1020‚ãÖ1.8superscript10201.8\\cdot 10^{20}1.8 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPT1.1‚ãÖ1021‚ãÖ1.1superscript10211.1\\cdot 10^{21}1.1 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTConvS2S Ensemble[9]26.3641.297.7‚ãÖ1019‚ãÖ7.7superscript10197.7\\cdot 10^{19}7.7 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1021‚ãÖ1.2superscript10211.2\\cdot 10^{21}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTTransformer (base model)27.338.13.3‚ãÖùüèùüéùüèùüñbold-‚ãÖ3.3superscript10183.3\\cdot 10^{18}bold_3.3 bold_‚ãÖ bold_10 start_POSTSUPERSCRIPT bold_18 end_POSTSUPERSCRIPTTransformer (big)28.441.82.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT",
        "context_type": "table",
        "context_info": {
          "table_caption": "the transformer achieves better bleu scores than previous state-of-the-art models on the english-to-german and english-to-french newstest2014 tests at a fraction of the training cost"
        }
      },
      {
        "sentence": "We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]",
        "citation_numbers": [
          "38"
        ],
        "full_paragraph": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length +50505050, but terminate early when possible[38].",
        "context_type": "equation",
        "context_info": {}
      },
      {
        "sentence": "We set the maximum output length during inference to input length +50505050, but terminate early when possible[38].",
        "citation_numbers": [
          "38"
        ],
        "full_paragraph": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length +50505050, but terminate early when possible[38].",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "In row (E) we replace our sinusoidal positional encoding with learned positional embeddings[9], and observe nearly identical results to the base model.",
        "citation_numbers": [
          "9"
        ],
        "full_paragraph": "In Table3rows (B), we observe that reducing the attention key sizedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPThurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings[9], and observe nearly identical results to the base model.",
        "context_type": "table",
        "context_info": {
          "table_caption": "variations on the transformer architecture"
        }
      },
      {
        "sentence": "(2014)[37]WSJ only, discriminative88.3Petrov et al",
        "citation_numbers": [
          "37"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "(2006)[29]WSJ only, discriminative90.4Zhu et al",
        "citation_numbers": [
          "29"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "(2013)[40]WSJ only, discriminative90.4Dyer et al",
        "citation_numbers": [
          "40"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "(2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al",
        "citation_numbers": [
          "8"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "(2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al",
        "citation_numbers": [
          "40",
          "14"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "(2006)[26]semi-supervised92.1Vinyals & Kaiser el al",
        "citation_numbers": [
          "26"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "(2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al",
        "citation_numbers": [
          "37"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "(2015)[23]multi-task93.0Dyer et al",
        "citation_numbers": [
          "23"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "(2016)[8]generative93.3",
        "citation_numbers": [
          "8"
        ],
        "full_paragraph": "[TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes[37].",
        "citation_numbers": [
          "37"
        ],
        "full_paragraph": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input.\nFurthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes[37].",
        "context_type": "table",
        "context_info": {
          "table_caption": "the transformer generalizes well to english constituency parsing (results are on section 23 of wsj)parsertrainingwsj 23 f1vinyals & kaiser el al"
        }
      },
      {
        "sentence": "We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences",
        "citation_numbers": [
          "25"
        ],
        "full_paragraph": "We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.",
        "context_type": "table",
        "context_info": {}
      },
      {
        "sentence": "We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]",
        "citation_numbers": [
          "37"
        ],
        "full_paragraph": "We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.",
        "context_type": "text",
        "context_info": {}
      },
      {
        "sentence": "Our results in Table4show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar[8].",
        "citation_numbers": [
          "8"
        ],
        "full_paragraph": "Our results in Table4show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar[8].",
        "context_type": "table",
        "context_info": {
          "table_caption": "the transformer generalizes well to english constituency parsing (results are on section 23 of wsj)parsertrainingwsj 23 f1vinyals & kaiser el al"
        }
      },
      {
        "sentence": "In contrast to RNN sequence-to-sequence models[37], the Transformer outperforms the BerkeleyParser[29]even when training only on the WSJ training set of 40K sentences.",
        "citation_numbers": [
          "37",
          "29"
        ],
        "full_paragraph": "In contrast to RNN sequence-to-sequence models[37], the Transformer outperforms the BerkeleyParser[29]even when training only on the WSJ training set of 40K sentences.",
        "context_type": "table",
        "context_info": {
          "table_caption": "the transformer generalizes well to english constituency parsing (results are on section 23 of wsj)parsertrainingwsj 23 f1vinyals & kaiser el al"
        }
      }
    ],
    "full_document_text": "Recurrent neural networks, long short-term memory[13]and gated recurrent[7]neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15]. Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden stateshtsubscript‚Ñéùë°h_{t}italic_h start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT, as a function of the previous hidden stateht‚àí1subscript‚Ñéùë°1h_{t-1}italic_h start_POSTSUBSCRIPT italic_t - 1 end_POSTSUBSCRIPTand the input for positiontùë°titalic_t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples.\nRecent work has achieved significant improvements in computational efficiency through factorization tricks[21]and conditional computation[32], while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains. Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences[2,19]. In all but a few cases[27], however, such attention mechanisms are used in conjunction with a recurrent network. In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs. The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18]and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions[12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section3.2. Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations[4,27,28,22]. End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks[34]. To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution.\nIn the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as[17,18]and[9]. Encoder:The encoder is composed of a stack ofN=6ùëÅ6N=6italic_N = 6identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection[11]around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer isLayerNorm‚Å¢(x+Sublayer‚Å¢(x))LayerNormùë•Sublayerùë•\\mathrm{LayerNorm}(x+\\mathrm{Sublayer}(x))roman_LayerNorm ( italic_x + roman_Sublayer ( italic_x ) ), whereSublayer‚Å¢(x)Sublayerùë•\\mathrm{Sublayer}(x)roman_Sublayer ( italic_x )is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimensiondmodel=512subscriptùëëmodel512d_{\\text{model}}=512italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT = 512. Decoder:The decoder is also composed of a stack ofN=6ùëÅ6N=6italic_N = 6identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for positioniùëñiitalic_ican depend only on the known outputs at positions less thaniùëñiitalic_i. An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key. [TABLE] : 3.2.1Scaled Dot-Product AttentionWe call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimensiondksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, and values of dimensiondvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT. We compute the dot products of the query with all keys, divide each bydksubscriptùëëùëò\\sqrt{d_{k}}square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG, and apply a softmax function to obtain the weights on the values.In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrixQùëÑQitalic_Q. The keys and values are also packed together into matricesKùêæKitalic_KandVùëâVitalic_V. We compute the matrix of outputs as:Attention‚Å¢(Q,K,V)=softmax‚Å¢(Q‚Å¢KTdk)‚Å¢VAttentionùëÑùêæùëâsoftmaxùëÑsuperscriptùêæùëásubscriptùëëùëòùëâ\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}(\\frac{QK^{T}}{\\sqrt{d_{k}}})Vroman_Attention ( italic_Q , italic_K , italic_V ) = roman_softmax ( divide start_ARG italic_Q italic_K start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG ) italic_V(1)The two most commonly used attention functions are additive attention[2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.While for small values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTthe two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT[3]. We suspect that for large values ofdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients111To illustrate why the dot products get large, assume that the components ofqùëûqitalic_qandkùëòkitalic_kare independent random variables with mean00and variance1111. Then their dot product,q‚ãÖk=‚àëi=1dkqi‚Å¢ki‚ãÖùëûùëòsuperscriptsubscriptùëñ1subscriptùëëùëòsubscriptùëûùëñsubscriptùëòùëñq\\cdot k=\\sum_{i=1}^{d_{k}}q_{i}k_{i}italic_q ‚ãÖ italic_k = ‚àë start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, has mean00and variancedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT.. To counteract this effect, we scale the dot products by1dk1subscriptùëëùëò\\frac{1}{\\sqrt{d_{k}}}divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG end_ARG. [TABLE] : 3.2.2Multi-Head AttentionScaled Dot-Product AttentionMulti-Head AttentionFigure 2:(left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.Instead of performing a single attention function withdmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and valuesh‚Ñéhitalic_htimes with different, learned linear projections todksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT,dksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTanddvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPTdimensions, respectively.\nOn each of these projected versions of queries, keys and values we then perform the attention function in parallel, yieldingdvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT-dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure2.Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.MultiHead‚Å¢(Q,K,V)MultiHeadùëÑùêæùëâ\\displaystyle\\mathrm{MultiHead}(Q,K,V)roman_MultiHead ( italic_Q , italic_K , italic_V )=Concat‚Å¢(head1,‚Ä¶,headh)‚Å¢WOabsentConcatsubscripthead1‚Ä¶subscriptheadhsuperscriptùëäùëÇ\\displaystyle=\\mathrm{Concat}(\\mathrm{head_{1}},...,\\mathrm{head_{h}})W^{O}= roman_Concat ( roman_head start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , roman_head start_POSTSUBSCRIPT roman_h end_POSTSUBSCRIPT ) italic_W start_POSTSUPERSCRIPT italic_O end_POSTSUPERSCRIPTwhere‚Å¢headiwheresubscriptheadi\\displaystyle\\text{where}~{}\\mathrm{head_{i}}where roman_head start_POSTSUBSCRIPT roman_i end_POSTSUBSCRIPT=Attention‚Å¢(Q‚Å¢WiQ,K‚Å¢WiK,V‚Å¢WiV)absentAttentionùëÑsubscriptsuperscriptùëäùëÑùëñùêæsubscriptsuperscriptùëäùêæùëñùëâsubscriptsuperscriptùëäùëâùëñ\\displaystyle=\\mathrm{Attention}(QW^{Q}_{i},KW^{K}_{i},VW^{V}_{i})= roman_Attention ( italic_Q italic_W start_POSTSUPERSCRIPT italic_Q end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_K italic_W start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_V italic_W start_POSTSUPERSCRIPT italic_V end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT )Where the projections are parameter matricesWiQ‚àà‚Ñùdmodel√ódksubscriptsuperscriptùëäùëÑùëñsuperscript‚ÑùsubscriptùëëmodelsubscriptùëëùëòW^{Q}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{k}}italic_W start_POSTSUPERSCRIPT italic_Q end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT,WiK‚àà‚Ñùdmodel√ódksubscriptsuperscriptùëäùêæùëñsuperscript‚ÑùsubscriptùëëmodelsubscriptùëëùëòW^{K}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{k}}italic_W start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_POSTSUPERSCRIPT,WiV‚àà‚Ñùdmodel√ódvsubscriptsuperscriptùëäùëâùëñsuperscript‚Ñùsubscriptùëëmodelsubscriptùëëùë£W^{V}_{i}\\in\\mathbb{R}^{d_{\\text{model}}\\times d_{v}}italic_W start_POSTSUPERSCRIPT italic_V end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT end_POSTSUPERSCRIPTandWO‚àà‚Ñùh‚Å¢dv√ódmodelsuperscriptùëäùëÇsuperscript‚Ñù‚Ñésubscriptùëëùë£subscriptùëëmodelW^{O}\\in\\mathbb{R}^{hd_{v}\\times d_{\\text{model}}}italic_W start_POSTSUPERSCRIPT italic_O end_POSTSUPERSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_h italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT √ó italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT.In this work we employh=8‚Ñé8h=8italic_h = 8parallel attention layers, or heads. For each of these we usedk=dv=dmodel/h=64subscriptùëëùëòsubscriptùëëùë£subscriptùëëmodel‚Ñé64d_{k}=d_{v}=d_{\\text{model}}/h=64italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPT = italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT / italic_h = 64.\nDue to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality. 3.2.3Applications of Attention in our ModelThe Transformer uses multi-head attention in three different ways:‚Ä¢In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9].‚Ä¢The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.‚Ä¢Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to‚àí‚àû-\\infty- ‚àû) all values in the input of the softmax which correspond to illegal connections. See Figure2. In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between. [TABLE] : FFN‚Å¢(x)=max‚Å°(0,x‚Å¢W1+b1)‚Å¢W2+b2FFNùë•0ùë•subscriptùëä1subscriptùëè1subscriptùëä2subscriptùëè2\\mathrm{FFN}(x)=\\max(0,xW_{1}+b_{1})W_{2}+b_{2}roman_FFN ( italic_x ) = roman_max ( 0 , italic_x italic_W start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + italic_b start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) italic_W start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + italic_b start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT(2) While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1. The dimensionality of input and output isdmodel=512subscriptùëëmodel512d_{\\text{model}}=512italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT = 512, and the inner-layer has dimensionalitydf‚Å¢f=2048subscriptùëëùëìùëì2048d_{ff}=2048italic_d start_POSTSUBSCRIPT italic_f italic_f end_POSTSUBSCRIPT = 2048. Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to[30]. In the embedding layers, we multiply those weights bydmodelsubscriptùëëmodel\\sqrt{d_{\\text{model}}}square-root start_ARG italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_ARG. Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimensiondmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTas the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed[9]. In this work, we use sine and cosine functions of different frequencies: [TABLE] : P‚Å¢E(p‚Å¢o‚Å¢s,2‚Å¢i)=s‚Å¢i‚Å¢n‚Å¢(p‚Å¢o‚Å¢s/100002‚Å¢i/dmodel)ùëÉsubscriptùê∏ùëùùëúùë†2ùëñùë†ùëñùëõùëùùëúùë†superscript100002ùëñsubscriptùëëmodel\\displaystyle PE_{(pos,2i)}=sin(pos/10000^{2i/d_{\\text{model}}})italic_P italic_E start_POSTSUBSCRIPT ( italic_p italic_o italic_s , 2 italic_i ) end_POSTSUBSCRIPT = italic_s italic_i italic_n ( italic_p italic_o italic_s / 10000 start_POSTSUPERSCRIPT 2 italic_i / italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT )P‚Å¢E(p‚Å¢o‚Å¢s,2‚Å¢i+1)=c‚Å¢o‚Å¢s‚Å¢(p‚Å¢o‚Å¢s/100002‚Å¢i/dmodel)ùëÉsubscriptùê∏ùëùùëúùë†2ùëñ1ùëêùëúùë†ùëùùëúùë†superscript100002ùëñsubscriptùëëmodel\\displaystyle PE_{(pos,2i+1)}=cos(pos/10000^{2i/d_{\\text{model}}})italic_P italic_E start_POSTSUBSCRIPT ( italic_p italic_o italic_s , 2 italic_i + 1 ) end_POSTSUBSCRIPT = italic_c italic_o italic_s ( italic_p italic_o italic_s / 10000 start_POSTSUPERSCRIPT 2 italic_i / italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ) wherep‚Å¢o‚Å¢sùëùùëúùë†positalic_p italic_o italic_sis the position andiùëñiitalic_iis the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from2‚Å¢œÄ2ùúã2\\pi2 italic_œÄto10000‚ãÖ2‚Å¢œÄ‚ãÖ100002ùúã10000\\cdot 2\\pi10000 ‚ãÖ 2 italic_œÄ. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offsetkùëòkitalic_k,P‚Å¢Ep‚Å¢o‚Å¢s+kùëÉsubscriptùê∏ùëùùëúùë†ùëòPE_{pos+k}italic_P italic_E start_POSTSUBSCRIPT italic_p italic_o italic_s + italic_k end_POSTSUBSCRIPTcan be represented as a linear function ofP‚Å¢Ep‚Å¢o‚Å¢sùëÉsubscriptùê∏ùëùùëúùë†PE_{pos}italic_P italic_E start_POSTSUBSCRIPT italic_p italic_o italic_s end_POSTSUBSCRIPT. We also experimented with using learned positional embeddings[9]instead, and found that the two versions produced nearly identical results (see Table3row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training. In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations(x1,‚Ä¶,xn)subscriptùë•1‚Ä¶subscriptùë•ùëõ(x_{1},...,x_{n})( italic_x start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , italic_x start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT )to another sequence of equal length(z1,‚Ä¶,zn)subscriptùëß1‚Ä¶subscriptùëßùëõ(z_{1},...,z_{n})( italic_z start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ‚Ä¶ , italic_z start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ), withxi,zi‚àà‚Ñùdsubscriptùë•ùëñsubscriptùëßùëñsuperscript‚Ñùùëëx_{i},z_{i}\\in\\mathbb{R}^{d}italic_x start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_z start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà blackboard_R start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer.\nAnother is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required. The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies[12]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types. [TABLE] : Table 1:Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types.nùëõnitalic_nis the sequence length,dùëëditalic_dis the representation dimension,kùëòkitalic_kis the kernel size of convolutions andrùëüritalic_rthe size of the neighborhood in restricted self-attention.Layer TypeComplexity per LayerSequentialMaximum Path LengthOperationsSelf-AttentionO‚Å¢(n2‚ãÖd)ùëÇ‚ãÖsuperscriptùëõ2ùëëO(n^{2}\\cdot d)italic_O ( italic_n start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ‚ãÖ italic_d )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )RecurrentO‚Å¢(n‚ãÖd2)ùëÇ‚ãÖùëõsuperscriptùëë2O(n\\cdot d^{2})italic_O ( italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )O‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )O‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )ConvolutionalO‚Å¢(k‚ãÖn‚ãÖd2)ùëÇ‚ãÖùëòùëõsuperscriptùëë2O(k\\cdot n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )Self-Attention (restricted)O‚Å¢(r‚ãÖn‚ãÖd)ùëÇ‚ãÖùëüùëõùëëO(r\\cdot n\\cdot d)italic_O ( italic_r ‚ãÖ italic_n ‚ãÖ italic_d )O‚Å¢(1)ùëÇ1O(1)italic_O ( 1 )O‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r ) As noted in Table1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requiresO‚Å¢(n)ùëÇùëõO(n)italic_O ( italic_n )sequential operations.\nIn terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence lengthnùëõnitalic_nis smaller than the representation dimensionalitydùëëditalic_d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece[38]and byte-pair[31]representations.\nTo improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of sizerùëüritalic_rin the input sequence centered around the respective output position. This would increase the maximum path length toO‚Å¢(n/r)ùëÇùëõùëüO(n/r)italic_O ( italic_n / italic_r ). We plan to investigate this approach further in future work. A single convolutional layer with kernel widthk<nùëòùëõk<nitalic_k < italic_ndoes not connect all pairs of input and output positions. Doing so requires a stack ofO‚Å¢(n/k)ùëÇùëõùëòO(n/k)italic_O ( italic_n / italic_k )convolutional layers in the case of contiguous kernels, orO‚Å¢(l‚Å¢o‚Å¢gk‚Å¢(n))ùëÇùëôùëúsubscriptùëîùëòùëõO(log_{k}(n))italic_O ( italic_l italic_o italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( italic_n ) )in the case of dilated convolutions[18], increasing the length of the longest paths between any two positions in the network.\nConvolutional layers are generally more expensive than recurrent layers, by a factor ofkùëòkitalic_k. Separable convolutions[6], however, decrease the complexity considerably, toO‚Å¢(k‚ãÖn‚ãÖd+n‚ãÖd2)ùëÇ‚ãÖùëòùëõùëë‚ãÖùëõsuperscriptùëë2O(k\\cdot n\\cdot d+n\\cdot d^{2})italic_O ( italic_k ‚ãÖ italic_n ‚ãÖ italic_d + italic_n ‚ãÖ italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ). Even withk=nùëòùëõk=nitalic_k = italic_n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model. As side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences. We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens. We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table3), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days). We used the Adam optimizer[20]withŒ≤1=0.9subscriptùõΩ10.9\\beta_{1}=0.9italic_Œ≤ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 0.9,Œ≤2=0.98subscriptùõΩ20.98\\beta_{2}=0.98italic_Œ≤ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = 0.98andœµ=10‚àí9italic-œµsuperscript109\\epsilon=10^{-9}italic_œµ = 10 start_POSTSUPERSCRIPT - 9 end_POSTSUPERSCRIPT. We varied the learning rate over the course of training, according to the formula: [TABLE] : l‚Å¢r‚Å¢a‚Å¢t‚Å¢e=dmodel‚àí0.5‚ãÖmin‚Å°(s‚Å¢t‚Å¢e‚Å¢p‚Å¢_‚Å¢n‚Å¢u‚Å¢m‚àí0.5,s‚Å¢t‚Å¢e‚Å¢p‚Å¢_‚Å¢n‚Å¢u‚Å¢m‚ãÖw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢s‚àí1.5)ùëôùëüùëéùë°ùëí‚ãÖsuperscriptsubscriptùëëmodel0.5ùë†ùë°ùëíùëù_ùëõùë¢superscriptùëö0.5‚ãÖùë†ùë°ùëíùëù_ùëõùë¢ùëöùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùsuperscriptùë†1.5lrate=d_{\\text{model}}^{-0.5}\\cdot\\min({step\\_num}^{-0.5},{step\\_num}\\cdot{%\nwarmup\\_steps}^{-1.5})italic_l italic_r italic_a italic_t italic_e = italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 0.5 end_POSTSUPERSCRIPT ‚ãÖ roman_min ( italic_s italic_t italic_e italic_p _ italic_n italic_u italic_m start_POSTSUPERSCRIPT - 0.5 end_POSTSUPERSCRIPT , italic_s italic_t italic_e italic_p _ italic_n italic_u italic_m ‚ãÖ italic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_s start_POSTSUPERSCRIPT - 1.5 end_POSTSUPERSCRIPT )(3) This corresponds to increasing the learning rate linearly for the firstw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢sùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùùë†warmup\\_stepsitalic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_straining steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We usedw‚Å¢a‚Å¢r‚Å¢m‚Å¢u‚Å¢p‚Å¢_‚Å¢s‚Å¢t‚Å¢e‚Å¢p‚Å¢s=4000ùë§ùëéùëüùëöùë¢ùëù_ùë†ùë°ùëíùëùùë†4000warmup\\_steps=4000italic_w italic_a italic_r italic_m italic_u italic_p _ italic_s italic_t italic_e italic_p italic_s = 4000. We employ three types of regularization during training: Residual DropoutWe apply dropout[33]to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate ofPd‚Å¢r‚Å¢o‚Å¢p=0.1subscriptùëÉùëëùëüùëúùëù0.1P_{drop}=0.1italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPT = 0.1. Label SmoothingDuring training, we employed label smoothing of valueœµl‚Å¢s=0.1subscriptitalic-œµùëôùë†0.1\\epsilon_{ls}=0.1italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPT = 0.1[36]. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score. [TABLE] : Table 2:The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.ModelBLEUTraining Cost (FLOPs)EN-DEEN-FREN-DEEN-FRByteNet[18]23.75Deep-Att + PosUnk[39]39.21.0‚ãÖ1020‚ãÖ1.0superscript10201.0\\cdot 10^{20}1.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL[38]24.639.922.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.4‚ãÖ1020‚ãÖ1.4superscript10201.4\\cdot 10^{20}1.4 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTConvS2S[9]25.1640.469.6‚ãÖ1018‚ãÖ9.6superscript10189.6\\cdot 10^{18}9.6 ‚ãÖ 10 start_POSTSUPERSCRIPT 18 end_POSTSUPERSCRIPT1.5‚ãÖ1020‚ãÖ1.5superscript10201.5\\cdot 10^{20}1.5 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTMoE[32]26.0340.562.0‚ãÖ1019‚ãÖ2.0superscript10192.0\\cdot 10^{19}2.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1020‚ãÖ1.2superscript10201.2\\cdot 10^{20}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTDeep-Att + PosUnk Ensemble[39]40.48.0‚ãÖ1020‚ãÖ8.0superscript10208.0\\cdot 10^{20}8.0 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPTGNMT + RL Ensemble[38]26.3041.161.8‚ãÖ1020‚ãÖ1.8superscript10201.8\\cdot 10^{20}1.8 ‚ãÖ 10 start_POSTSUPERSCRIPT 20 end_POSTSUPERSCRIPT1.1‚ãÖ1021‚ãÖ1.1superscript10211.1\\cdot 10^{21}1.1 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTConvS2S Ensemble[9]26.3641.297.7‚ãÖ1019‚ãÖ7.7superscript10197.7\\cdot 10^{19}7.7 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT1.2‚ãÖ1021‚ãÖ1.2superscript10211.2\\cdot 10^{21}1.2 ‚ãÖ 10 start_POSTSUPERSCRIPT 21 end_POSTSUPERSCRIPTTransformer (base model)27.338.13.3‚ãÖùüèùüéùüèùüñbold-‚ãÖ3.3superscript10183.3\\cdot 10^{18}bold_3.3 bold_‚ãÖ bold_10 start_POSTSUPERSCRIPT bold_18 end_POSTSUPERSCRIPTTransformer (big)28.441.82.3‚ãÖ1019‚ãÖ2.3superscript10192.3\\cdot 10^{19}2.3 ‚ãÖ 10 start_POSTSUPERSCRIPT 19 end_POSTSUPERSCRIPT On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table2) outperforms the best previously reported models (including ensembles) by more than2.02.02.02.0BLEU, establishing a new state-of-the-art BLEU score of28.428.428.428.4. The configuration of this model is listed in the bottom line of Table3. Training took3.53.53.53.5days on8888P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models. On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of41.041.041.041.0, outperforming all of the previously published single models, at less than1/4141/41 / 4the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout ratePd‚Å¢r‚Å¢o‚Å¢p=0.1subscriptùëÉùëëùëüùëúùëù0.1P_{drop}=0.1italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPT = 0.1, instead of0.30.30.30.3. For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of4444and length penaltyŒ±=0.6ùõº0.6\\alpha=0.6italic_Œ± = 0.6[38]. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length +50505050, but terminate early when possible[38]. Table2summarizes our results and compares our translation quality and training costs to other model architectures from the literature. We estimate the number of floating point operations used to train a model by multiplying the training time, the number of GPUs used, and an estimate of the sustained single-precision floating-point capacity of each GPU222We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.. [TABLE] : Table 3:Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.NùëÅNitalic_Ndmodelsubscriptùëëmodeld_{\\text{model}}italic_d start_POSTSUBSCRIPT model end_POSTSUBSCRIPTdffsubscriptùëëffd_{\\text{ff}}italic_d start_POSTSUBSCRIPT ff end_POSTSUBSCRIPTh‚Ñéhitalic_hdksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPTdvsubscriptùëëùë£d_{v}italic_d start_POSTSUBSCRIPT italic_v end_POSTSUBSCRIPTPd‚Å¢r‚Å¢o‚Å¢psubscriptùëÉùëëùëüùëúùëùP_{drop}italic_P start_POSTSUBSCRIPT italic_d italic_r italic_o italic_p end_POSTSUBSCRIPTœµl‚Å¢ssubscriptitalic-œµùëôùë†\\epsilon_{ls}italic_œµ start_POSTSUBSCRIPT italic_l italic_s end_POSTSUBSCRIPTtrainPPLBLEUparamssteps(dev)(dev)√ó106absentsuperscript106\\times 10^{6}√ó 10 start_POSTSUPERSCRIPT 6 end_POSTSUPERSCRIPTbase65122048864640.10.1100K4.9225.865(A)15125125.2924.941281285.0025.51632324.9125.83216165.0125.4(B)165.1625.158325.0125.460(C)26.1123.73645.1925.35084.8825.58025632325.7524.52810241281284.6626.016810245.1225.45340964.7526.290(D)0.05.7724.60.24.9525.50.04.6725.30.25.4725.7(E)positional embedding instead of sinusoids4.9225.7big610244096160.3300K4.3326.4213 To evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the development set, newstest2013. We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table3. In Table3rows (A), we vary the number of attention heads and the attention key and value dimensions, keeping the amount of computation constant, as described in Section3.2.2. While single-head attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads. In Table3rows (B), we observe that reducing the attention key sizedksubscriptùëëùëòd_{k}italic_d start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPThurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings[9], and observe nearly identical results to the base model. [TABLE] : Table 4:The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)ParserTrainingWSJ 23 F1Vinyals & Kaiser el al. (2014)[37]WSJ only, discriminative88.3Petrov et al. (2006)[29]WSJ only, discriminative90.4Zhu et al. (2013)[40]WSJ only, discriminative90.4Dyer et al. (2016)[8]WSJ only, discriminative91.7Transformer (4 layers)WSJ only, discriminative91.3Zhu et al. (2013)[40]semi-supervised91.3Huang & Harper (2009)[14]semi-supervised91.3McClosky et al. (2006)[26]semi-supervised92.1Vinyals & Kaiser el al. (2014)[37]semi-supervised92.1Transformer (4 layers)semi-supervised92.7Luong et al. (2015)[23]multi-task93.0Dyer et al. (2016)[8]generative93.3 To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input.\nFurthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes[37]. We trained a 4-layer transformer withdm‚Å¢o‚Å¢d‚Å¢e‚Å¢l=1024subscriptùëëùëöùëúùëëùëíùëô1024d_{model}=1024italic_d start_POSTSUBSCRIPT italic_m italic_o italic_d italic_e italic_l end_POSTSUBSCRIPT = 1024on the Wall Street Journal (WSJ) portion of the Penn Treebank[25], about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting. We performed only a small number of experiments to select the dropout, both attention and residual (section5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length +300300300300. We used a beam size of21212121andŒ±=0.3ùõº0.3\\alpha=0.3italic_Œ± = 0.3for both WSJ only and the semi-supervised setting. Our results in Table4show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar[8]. In contrast to RNN sequence-to-sequence models[37], the Transformer outperforms the BerkeleyParser[29]even when training only on the WSJ training set of 40K sentences. In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention. For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles. We are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video.\nMaking generation less sequential is another research goals of ours. The code we used to train and evaluate our models is available athttps://github.com/tensorflow/tensor2tensor. AcknowledgementsWe are grateful to Nal Kalchbrenner and Stephan Gouws for\ntheir fruitful comments, corrections and inspiration."
  }
}