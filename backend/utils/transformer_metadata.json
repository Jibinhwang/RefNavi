{
  "title": "Attention Is All You Need",
  "abstract_original": "The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.0 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature.",
  "abstract_llm": "The paper introduces the Transformer, a model architecture that replaces recurrent neural networks with self-attention mechanisms. This allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs. The Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution.",
  "body_fixed": "1 Introduction Recurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [29,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [31,21,13]. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research. Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states h, as a function of the previous hidden state h and the input for position t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples. Recent work has achieved significant improvements in computational efficiency through factorization tricks [18] and conditional computation [26], while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains. Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences [2,16]. In all but a few cases [22], however, such attention mechanisms are used in conjunction with a recurrent network. In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs. 2 Background The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [20], ByteNet [15] and ConvS2S [8], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions [11]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2. Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4,22,23,19]. End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks [28]. To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [14,15] and [8]. 3 Model Architecture Most competitive neural sequence transduction models have an encoder-decoder structure [5,2,29]. Here, the encoder maps an input sequence of symbol representations (x ,...,x ) to a sequence of continuous representations z = (z ,...,z ). Given z, the decoder then generates an output sequence(y ,...,y ) of symbols one element at a time. At each step the model is auto-regressive [9], consuming the previously generated symbols as additional input when generating the next. The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1, respectively. 3.1 Encoder and Decoder Stacks Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection [10] around each of the two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is LayerNorm(x+Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension d =512. model Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of these sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions.\n\nThis masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position i can depend only on the known outputs at positions less than i. 3.2 Attention An attention function can be described as a mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key. 3.2.1 Scaled Dot-Product Attention We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of queries and keys of dimension d, and values of dimension d. We compute the dot products of the queries with all keys, divide each by √d, and apply a softmax function to obtain the weights on the values. In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V. We compute the matrix of outputs as: Attention(Q, K, V) = softmax(QKT/√d) * V (1) The two most commonly used attention functions are additive attention [2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of √1/d. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code. While for small values of d the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of d [3]. We suspect that for large values of d, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients. To counteract this effect, we scale the dot products by √1/d. 3.2.2 Multi-Head Attention Instead of performing a single attention function with d-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d, d and d dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d-dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure 2. Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this. To illustrate why the dot products get large, assume that the components of q and k are independent random variables with mean 0 and variance 1. Then their dot product, q·k = ∑dk qi ki, has mean 0 and variance d. MultiHead(Q, K, V) = Concat(head1, ..., headh) * WO where headi = Attention(Q * WQi, K * WKi, V * WVi) Where the projections are parameter matrices WQi ∈ Rdmodel×dk, WKi ∈ Rdmodel×dk, WVi ∈ Rdmodel×dv and WO ∈ Rhdv×dmodel. In this work we employ h = 8 parallel attention layers, or heads. For each of these we use d = d = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality. 3.2.3 Applications of Attention in our Model The Transformer uses multi-head attention in three different ways: In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [31, 2, 8]. The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder. Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to -∞) all values in the input of the softmax which correspond to illegal connections. See Figure 2. 3.3 Position-wise Feed-Forward Networks In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between. FFN(x) = max(0, x * W1 + b1) * W2 + b2 (2) While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1. The dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality dff = 2048. 3.4 Embeddings and Softmax Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [24]. In the embedding layers, we multiply those weights by √dmodel. 3.5 Positional Encoding Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\n\nLayer Type Complexity per Layer Sequential Maximum Path Length Operations Self-Attention O(n2·d) O(1) O(1) Recurrent O(n·d2) O(n) O(n) Convolutional O(k·n·d2) O(1) O(log (n)) k Self-Attention (restricted) O(r·n·d) O(1) O(n/r) bottoms of the encoder and decoder stacks. The positional encoding has the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed [8]. In this work, we use sine and cosine functions of different frequencies: PE = sin(pos/100002i/d model) (pos,2i) PE = cos(pos/100002i/d model) (pos,2i+1) where pos is the position and i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from 2π to 10000·2π. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset k, PE can be represented as a linear function of pos+k PE . pos We also experimented with using learned positional embeddings [8] instead, and found that the two versions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training. 4 Why Self-Attention In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x ,...,x ) to another sequence of equal length (z ,...,z ), with x ,z ∈ Rd, such as a hidden 1 n 1 n i i layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required. The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backwards signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies [11]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types. As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires O(n) sequential operations. In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence length n is smaller than the representation dimensionality d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece [31] and byte-pair [25] representations. To improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of size r in the input sequence centered around the respective output position. This would increase the maximum path length to O(n/r). We plan to investigate this approach further in future work. A single convolutional layer with kernel width k <n does not connect all pairs of input and output positions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels, or O(log (n)) in the case of dilated convolutions [15], increasing the length of the longest paths between any two positions in the network. Convolutional layers are generally more expensive than recurrent layers, by a factor of k. Separable convolutions [6], however, decrease the complexity considerably, to O(k·n·d+n·d2). Even with k = n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model. As a side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences. 5 Training This section describes the training regime for our models. 5.1 Training Data and Batching We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary [31]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens. 5.2 Hardware and Schedule We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models, (described on the bottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days). 5.3 Optimizer We used the Adam optimizer [17] with β =0.9, β =0.98 and ε=10−9. We varied the learning rate over the course of training, according to the formula: lrate=d−0.5 ·min(step_num−0.5,step_num·warmup_steps−1.5) (3) model This corresponds to increasing the learning rate linearly for the first warmup_steps training steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We used warmup_steps=4000. 5.4 Regularization We employ three types of regularization during training: Residual Dropout We apply dropout [27] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P =0.1. drop Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French news test 2014 tests at a fraction of the training cost.\n\nBLEU TrainingCost(FLOPs) Model EN-DE EN-FR EN-DE EN-FR ByteNet[15] 23.75 Deep-Att+PosUnk[32] 39.2 1.0·1020 GNMT+RL[31] 24.6 39.92 2.3·1019 1.4·1020 ConvS2S[8] 25.16 40.46 9.6·1018 1.5·1020 MoE[26] 26.03 40.56 2.0·1019 1.2·1020 Deep-Att+PosUnkEnsemble[32] 40.4 8.0·1020 GNMT+RLEnsemble[31] 26.30 41.16 1.8·1020 1.1·1021 ConvS2SEnsemble[8] 26.36 41.29 7.7·1019 1.2·1021 Transformer(basemodel) 27.3 38.1 3.3·1018 Transformer(big) 28.4 41.0 2.3·1019 LabelSmoothing Duringtraining,weemployedlabelsmoothingofvalue(cid:15) = 0.1[30]. This hurtsperplexity,asthemodellearnstobemoreunsure,butimprovesaccuracyandBLEUscore. 6 Results 6.1 MachineTranslation OntheWMT2014English-to-Germantranslationtask,thebigtransformermodel(Transformer(big) inTable2)outperformsthebestpreviouslyreportedmodels(includingensembles)bymorethan2.0 BLEU,establishinganewstate-of-the-artBLEUscoreof28.4. Theconfigurationofthismodelis listedinthebottomlineofTable3. Trainingtook3.5dayson8P100GPUs. Evenourbasemodel surpassesallpreviouslypublishedmodelsandensembles,atafractionofthetrainingcostofanyof thecompetitivemodels. OntheWMT2014English-to-Frenchtranslationtask,ourbigmodelachievesaBLEUscoreof41.0, outperformingallofthepreviouslypublishedsinglemodels,atlessthan1/4thetrainingcostofthe previousstate-of-the-artmodel. TheTransformer(big)modeltrainedforEnglish-to-Frenchused dropout rate P =0.1,insteadof0.3. drop Forthebasemodels,weusedasinglemodelobtainedbyaveragingthelast5checkpoints,which werewrittenat10-minuteintervals. Forthebigmodels,weaveragedthelast20checkpoints. We usedbeamsearchwithabeamsizeof4andlengthpenaltyα = 0.6[31]. Thesehyperparameters werechosenafterexperimentationonthedevelopmentset. Wesetthemaximumoutputlengthduring inferencetoinputlength+50,butterminateearlywhenpossible[31]. Table2summarizesourresultsandcomparesourtranslationqualityandtrainingcoststoothermodel architecturesfromtheliterature. Weestimatethenumberoffloatingpointoperationsusedtotraina modelbymultiplyingthetrainingtime,thenumberofGPUsused,andanestimateofthesustained single-precisionfloating-pointcapacityofeachGPU5. 6.2 ModelVariations ToevaluatetheimportanceofdifferentcomponentsoftheTransformer,wevariedourbasemodel indifferentways,measuringthechangeinperformanceonEnglish-to-Germantranslationonthe developmentset,newstest2013. Weusedbeamsearchasdescribedintheprevioussection,butno checkpointaveraging. WepresenttheseresultsinTable3. InTable3rows(A),wevarythenumberofattentionheadsandtheattentionkeyandvaluedimensions, keeping the amount of computation constant, as described in Section 3.2.2. While single-head attentionis0.9BLEUworsethanthebestsetting,qualityalsodropsoffwithtoomanyheads. 5Weusedvaluesof2.8,3.7,6.0and9.5TFLOPSforK80,K40,M40andP100,respectively. 8 Table3: VariationsontheTransformerarchitecture. Unlistedvaluesareidenticaltothoseofthebase model. AllmetricsareontheEnglish-to-Germantranslationdevelopmentset,newstest2013. Listed perplexitiesareper-wordpiece,accordingtoourbyte-pairencoding,andshouldnotbecomparedto per-wordperplexities. train PPL BLEU params N d d h d d P (cid:15) model ff k v drop ls steps (dev) (dev) ×106 base 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65 1 512 512 5.29 24.9 4 128 128 5.00 25.5 (A) 16 32 32 4.91 25.8 32 16 16 5.01 25.4 16 5.16 25.1 58 (B) 32 5.01 25.4 60 2 6.11 23.7 36 4 5.19 25.3 50 8 4.88 25.5 80 (C) 256 32 32 5.75 24.5 28 1024 128 128 4.66 26.0 168 1024 5.12 25.4 53 4096 4.75 26.2 90 0.0 5.77 24.6 0.2 4.95 25.5 (D) 0.0 4.67 25.3 0.2 5.47 25.7 (E) positionalembeddinginsteadofsinusoids 4.92 25.7 big 6 1024 4096 16 0.3 300K 4.33 26.4 213 InTable3rows(B),weobservethatreducingtheattentionkeysized hurtsmodelquality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility functionthandotproductmaybebeneficial. Wefurtherobserveinrows(C)and(D)that,asexpected, biggermodelsarebetter,anddropoutisveryhelpfulinavoidingover-fitting.Inrow(E)wereplaceour sinusoidalpositionalencodingwithlearnedpositionalembeddings[8],andobservenearlyidentical resultstothebasemodel. 7 Conclusion Inthiswork,wepresentedtheTransformer,thefirstsequencetransductionmodelbasedentirelyon attention,replacingtherecurrentlayersmostcommonlyusedinencoder-decoderarchitectureswith multi-headedself-attention. For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-Frenchtranslationtasks,weachieveanewstateoftheart. Intheformertaskourbest modeloutperformsevenallpreviouslyreportedensembles. Weareexcitedaboutthefutureofattention-basedmodelsandplantoapplythemtoothertasks. We plantoextendtheTransformertoproblemsinvolvinginputandoutputmodalitiesotherthantextand toinvestigatelocal,restrictedattentionmechanismstoefficientlyhandlelargeinputsandoutputs suchasimages,audioandvideo. Makinggenerationlesssequentialisanotherresearchgoalsofours. The code we used to train and evaluate our models is available at https://github.com/ tensorflow/tensor2tensor. Acknowledgements Wearegratefulto NalKalchbrennerand StephanGouwsfor theirfruitful comments,correctionsandinspiration. 9",
  "references": [
    {
      "ref_number": "[1]",
      "ref_title": "Layer normalization",
      "citation_contexts": [
        "We employ a residual connection [10] around each of the two sub-layers, followed by layer normalization [1]."
      ]
    },
    {
      "ref_number": "[2]",
      "ref_title": "Neural machine translation by jointly learning to align and translate",
      "citation_contexts": [
        "Recurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [29,2,5].",
        "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences [2,16].",
        "Most competitive neural sequence transduction models have an encoder-decoder structure [5,2,29].",
        "The two most commonly used attention functions are additive attention [2], and dot-product (multiplicative) attention.",
        "This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [31, 2, 8]."
      ]
    },
    {
      "ref_number": "[3]",
      "ref_title": "Massive exploration of neural machine translation architectures",
      "citation_contexts": [
        "While for small values of d the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of d [3].",
        "Sentences were encoded using byte-pair encoding [3], which has a shared source-target vocabulary of about 37000 tokens."
      ]
    },
    {
      "ref_number": "[4]",
      "ref_title": "Long short-term memory-networks for machine reading",
      "citation_contexts": [
        "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4,22,23,19]."
      ]
    },
    {
      "ref_number": "[5]",
      "ref_title": "Learning phrase representations using rnn encoder-decoder for statistical machine translation",
      "citation_contexts": [
        "Most competitive neural sequence transduction models have an encoder-decoder structure [5,2,29]."
      ]
    },
    {
      "ref_number": "[6]",
      "ref_title": "Xception: Deep learning with depthwise separable convolutions",
      "citation_contexts": [
        "Separable convolutions [6], however, decrease the complexity considerably, to O(k·n·d+n·d2)."
      ]
    },
    {
      "ref_number": "[7]",
      "ref_title": "Empirical evaluation of gated recurrent neural networks on sequence modeling",
      "citation_contexts": [
        "Recurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [29,2,5]."
      ]
    },
    {
      "ref_number": "[8]",
      "ref_title": "Convolutional sequence to sequence learning",
      "citation_contexts": [
        "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [20], ByteNet [15] and ConvS2S [8], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions.",
        "In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [14,15] and [8].",
        "This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [31, 2, 8].",
        "There are many choices of positional encodings, learned and fixed [8]. In this work, we use sine and cosine functions of different frequencies.",
        "We also experimented with using learned positional embeddings [8] instead, and found that the two versions produced nearly identical results (see Table 3 row (E)).",
        "ConvS2S[8] 25.16 40.46 9.6·1018 1.5·1020",
        "ConvS2SEnsemble[8] 26.36 41.29 7.7·1019 1.2·1021",
        "sinusoidalpositionalencodingwithlearnedpositionalembeddings[8],andobservenearlyidentical resultstothebasemodel."
      ]
    },
    {
      "ref_number": "[9]",
      "ref_title": "Generating sequences with recurrent neural networks",
      "citation_contexts": [
        "At each step the model is auto-regressive [9], consuming the previously generated symbols as additional input when generating the next."
      ]
    },
    {
      "ref_number": "[10]",
      "ref_title": "Deep residual learning for image recognition",
      "citation_contexts": [
        "We employ a residual connection [10] around each of the two sub-layers, followed by layer normalization [1]."
      ]
    },
    {
      "ref_number": "[11]",
      "ref_title": "Gradient flow in recurrent nets: the difficulty of learning long-term dependencies",
      "citation_contexts": [
        "In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions [11].",
        "Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backwards signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies [11]."
      ]
    },
    {
      "ref_number": "[12]",
      "ref_title": "Long short-term memory",
      "citation_contexts": [
        "Recurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [29,2,5]."
      ]
    },
    {
      "ref_number": "[13]",
      "ref_title": "Exploring the limits of language modeling",
      "citation_contexts": [
        "Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [31,21,13]."
      ]
    },
    {
      "ref_number": "[14]",
      "ref_title": "Neural GPUs learn algorithms",
      "citation_contexts": [
        "In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [14,15] and [8]."
      ]
    },
    {
      "ref_number": "[15]",
      "ref_title": "Neural machine translation in linear time",
      "citation_contexts": [
        "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [20], ByteNet [15] and ConvS2S [8], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions.",
        "In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [14,15] and [8].",
        "Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels, or O(log (n)) in the case of dilated convolutions [15], increasing the length of the longest paths between any two positions in the network.",
        "BLEU TrainingCost(FLOPs) Model EN-DE EN-FR EN-DE EN-FR ByteNet[15] 23.75"
      ]
    },
    {
      "ref_number": "[16]",
      "ref_title": "Structured attention networks",
      "citation_contexts": [
        "Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences [2,16]."
      ]
    },
    {
      "ref_number": "[17]",
      "ref_title": "Adam: A method for stochastic optimization",
      "citation_contexts": [
        "We used the Adam optimizer [17] with β =0.9, β =0.98 and ε=10−9."
      ]
    },
    {
      "ref_number": "[18]",
      "ref_title": "Factorization tricks for LSTM networks",
      "citation_contexts": [
        "Recent work has achieved significant improvements in computational efficiency through factorization tricks [18] and conditional computation [26], while also improving model performance in case of the latter."
      ]
    },
    {
      "ref_number": "[19]",
      "ref_title": "A structured self-attentive sentence embedding",
      "citation_contexts": [
        "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4,22,23,19]."
      ]
    },
    {
      "ref_number": "[20]",
      "ref_title": "Can active memory replace attention?",
      "citation_contexts": [
        "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [20], ByteNet [15] and ConvS2S [8], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions."
      ]
    },
    {
      "ref_number": "[21]",
      "ref_title": "Effective approaches to attention-based neural machine translation",
      "citation_contexts": [
        "Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [31,21,13]."
      ]
    },
    {
      "ref_number": "[22]",
      "ref_title": "A decomposable attention model",
      "citation_contexts": [
        "In all but a few cases [22], however, such attention mechanisms are used in conjunction with a recurrent network.",
        "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4,22,23,19]."
      ]
    },
    {
      "ref_number": "[23]",
      "ref_title": "A deep reinforced model for abstractive summarization",
      "citation_contexts": [
        "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4,22,23,19]."
      ]
    },
    {
      "ref_number": "[24]",
      "ref_title": "Using the output embedding to improve language models",
      "citation_contexts": [
        "In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [24]."
      ]
    },
    {
      "ref_number": "[25]",
      "ref_title": "Neural machine translation of rare words with subword units",
      "citation_contexts": [
        "which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece [31] and byte-pair [25] representations."
      ]
    },
    {
      "ref_number": "[26]",
      "ref_title": "Outrageously large neural networks: The sparsely-gated mixture-of-experts layer",
      "citation_contexts": [
        "Recent work has achieved significant improvements in computational efficiency through factorization tricks [18] and conditional computation [26], while also improving model performance in case of the latter.",
        "MoE[26] 26.03 40.56 2.0·1019 1.2·1020"
      ]
    },
    {
      "ref_number": "[27]",
      "ref_title": "Dropout: a simple way to prevent neural networks from overfitting",
      "citation_contexts": [
        "We apply dropout [27] to the output of each sub-layer, before it is added to the sub-layer input and normalized."
      ]
    },
    {
      "ref_number": "[28]",
      "ref_title": "End-to-end memory networks",
      "citation_contexts": [
        "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks [28]."
      ]
    },
    {
      "ref_number": "[29]",
      "ref_title": "Sequence to sequence learning with neural networks",
      "citation_contexts": [
        "Recurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [29,2,5].",
        "Most competitive neural sequence transduction models have an encoder-decoder structure [5,2,29]."
      ]
    },
    {
      "ref_number": "[30]",
      "ref_title": "Rethinking the inception architecture for computer vision",
      "citation_contexts": [
        "LabelSmoothing Duringtraining,weemployedlabelsmoothingofvalue(cid:15) = 0.1[30]."
      ]
    },
    {
      "ref_number": "[31]",
      "ref_title": "Google’s neural machine translation system: Bridging the gap between human and machine translation",
      "citation_contexts": [
        "Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [31,21,13].",
        "This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [31, 2, 8].",
        "which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece [31] and byte-pair [25] representations.",
        "For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary [31].",
        "GNMT+RL[31] 24.6 39.92 2.3·1019 1.4·1020",
        "GNMT+RLEnsemble[31] 26.30 41.16 1.8·1020 1.1·1021",
        "usedbeamsearchwithabeamsizeof4andlengthpenaltyα = 0.6[31].",
        "inferencetoinputlength+50,butterminateearlywhenpossible[31]."
      ]
    },
    {
      "ref_number": "[32]",
      "ref_title": "Deep recurrent models with fast-forward connections for neural machine translation",
      "citation_contexts": [
        "Deep-Att+PosUnk[32] 39.2 1.0·1020",
        "Deep-Att+PosUnkEnsemble[32] 40.4 8.0·1020"
      ]
    }
  ]
}